{"ast":null,"code":"import _classCallCheck from \"/home/cryptodev/Dev/aegis-burner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cryptodev/Dev/aegis-burner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/cryptodev/Dev/aegis-burner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/cryptodev/Dev/aegis-burner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cryptodev/Dev/aegis-burner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { Component } from 'react';\nimport cookie from 'react-cookies';\nimport deepmerge from 'deepmerge';\nimport Web3 from 'web3';\nvar queryString = require('query-string');\nvar interval;\nvar defaultConfig = {};\ndefaultConfig.DEBUG = false;\ndefaultConfig.POLLINTERVAL = 1777;\ndefaultConfig.requiredNetwork = ['Mainnet', 'Unknown' // allow local RPC for testing\n];\n\nvar burnMetaAccount = function burnMetaAccount(skipReload) {\n  if (window.localStorage && typeof window.localStorage.setItem === 'function') {\n    // window.localStorage.setItem(this.state.account + 'metaPrivateKey', '')\n    window.localStorage.setItem('metaPrivateKey', '');\n  } else {\n    var expires = new Date();\n    expires.setDate(expires.getDate() - 1);\n    cookie.save('metaPrivateKey', 0, {\n      path: '/',\n      expires: expires\n    });\n  }\n  if (!skipReload) {\n    setTimeout(function () {\n      window.location.reload(true);\n    }, 300);\n  }\n};\nfunction translateNetwork(id) {\n  var networks = {\n    1: 'Mainnet',\n    2: 'Morden',\n    3: 'Ropsten',\n    4: 'Rinkeby',\n    5: 'Goerli',\n    42: 'Kovan',\n    99: 'POA',\n    100: 'xDai',\n    1337: 'Local',\n    5777: 'Ganache'\n  };\n  return networks[id] || 'Unknown';\n}\nvar Dapparatus = /*#__PURE__*/function (_Component) {\n  _inherits(Dapparatus, _Component);\n  var _super = _createSuper(Dapparatus);\n  function Dapparatus(props) {\n    var _this;\n    _classCallCheck(this, Dapparatus);\n    _this = _super.call(this, props);\n    var config = defaultConfig;\n    if (props.config) {\n      config = deepmerge(config, props.config);\n      if (props.config.requiredNetwork && props.config.requiredNetwork[0] !== '') {\n        config.requiredNetwork = props.config.requiredNetwork;\n      }\n    }\n    console.log('!!!!DAPPARATUS~~~~~ ', config);\n    _this.state = {\n      status: 'loading',\n      networkId: 0,\n      account: false,\n      etherscan: '',\n      config: config,\n      metaAccount: false,\n      burnMetaAccount: burnMetaAccount,\n      web3Fellback: false\n    };\n    return _this;\n  }\n  _createClass(Dapparatus, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.config) {\n        var requiredNetwork = this.props.config.requiredNetwork;\n        var config = this.state.config;\n        if (requiredNetwork && requiredNetwork[0] !== '' && config.requiredNetwork !== requiredNetwork) {\n          config.requiredNetwork = requiredNetwork;\n          this.setState({\n            config: config\n          });\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      interval = setInterval(this.checkMetamask.bind(this), this.state.config.POLLINTERVAL);\n      this.checkMetamask();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(interval);\n    }\n  }, {\n    key: \"checkMetamask\",\n    value: function checkMetamask() {\n      var _this2 = this;\n      if (this.state.config.DEBUG) console.log('DAPPARATUS - checking state...');\n\n      /*\n      console.log(\"CHECK\")\n      try{\n        console.log(\"GETTING NETWORK \")\n        window.web3.version.getNetwork((err,network)=>{\n          console.log(\"GOT\")\n          console.log(err)\n          console.log(network)\n        })\n      }catch(e){\n        console.log(\"FAILED \")\n        console.log(e.toString())\n        this.fallBackToInfura()\n        return;\n      } */\n\n      if (typeof window.web3 === 'undefined' || typeof window.web3.version === 'undefined' && typeof window.web3.eth === 'undefined' || window.web3.currentProvider.isMetaMask === true) {\n        console.log('NO WEB3 YET (or no web3.version / web3.eth)');\n        if (this.state.config.DEBUG) console.log('DAPPARATUS - no web3');\n        console.log('Connecting to ganache...', this.props.fallbackWeb3Provider);\n        window.web3 = new Web3(this.props.fallbackWeb3Provider); // CORS ISSUES!//\n        console.log(\"web3 loaded, reporting as 'fellback'\");\n        // window.web3 = new Web3(new Web3.providers.WebsocketProvider('wss://rinkeby.infura.io/ws'))\n        if (this.state.status === 'loading') {\n          this.setState({\n            web3Fellback: true,\n            status: 'noweb3'\n          }, function () {\n            _this2.props.onUpdate(Object.assign({}, _this2.state));\n          });\n        } else if (this.state.status !== 'noweb3') {\n          if (this.state.config.DEBUG) console.log('DAPPARATUS - lost web3');\n          /// window.location.reload(true);\n          this.setState({\n            web3Fellback: true,\n            status: 'error'\n          }, function () {\n            _this2.props.onUpdate(Object.assign({}, _this2.state));\n          });\n        }\n      } else {\n        if (this.state.config.DEBUG) {\n          console.log('DAPPARATUS - yes web 3', window.web3);\n        }\n        if (typeof window.web3.version === 'undefined' || typeof window.web3.version.getNetwork !== 'function') {\n          // console.log(\"cant use version to get network, trying web3.eth.net ...\")\n          window.web3.eth.net.getId(function (err, networkId) {\n            if (_this2.state.config.DEBUG) console.log('NETWORK GETID', err, networkId);\n            _this2.inspectNetwork(networkId);\n          });\n        } else {\n          window.web3.version.getNetwork(function (err, networkId) {\n            if (_this2.state.config.DEBUG) console.log('NETWORK GETNET', err, networkId);\n            _this2.inspectNetwork(networkId);\n          });\n        }\n      }\n      var queryParams = queryString.parse(window.location.search);\n      var metaPrivateKey;\n      if (this.props.newPrivateKey) {\n        console.log('DAPPARATUS - NEW PRIVATE KEY');\n        metaPrivateKey = this.props.newPrivateKey;\n        if (metaPrivateKey.indexOf('0x') !== 0) {\n          metaPrivateKey = '0x' + metaPrivateKey;\n        }\n        // console.log(\"SAVING HARD CODED PRIVATE KEY\",metaPrivateKey)\n        if (window.localStorage && typeof window.localStorage.setItem === 'function') {\n          window.localStorage.setItem('metaPrivateKey', metaPrivateKey);\n        } else {\n          var expires = new Date();\n          expires.setDate(expires.getDate() + 365);\n          cookie.save('metaPrivateKey', metaPrivateKey, {\n            path: '/',\n            expires: expires\n          });\n        }\n        console.log('Clearing new private key...');\n        this.setState({\n          newPrivateKey: false\n        }, function () {\n          // this is clunky, but reload once they enter a pk for now\n          window.location = '/';\n        });\n      } else if (window.localStorage && typeof window.localStorage.setItem === 'function') {\n        metaPrivateKey = window.localStorage.getItem('metaPrivateKey');\n        if (metaPrivateKey === '0') metaPrivateKey = false;\n        if (metaPrivateKey && metaPrivateKey.length !== 66) metaPrivateKey = false;\n      }\n      if (!metaPrivateKey) {\n        metaPrivateKey = cookie.load('metaPrivateKey');\n        // what we need to do is convert someone over to window.localStorage from a cookie too...\n        // (we used to use cookies and we upgraded to window.localStorage)\n        if (metaPrivateKey && window.localStorage && typeof window.localStorage.setItem === 'function') {\n          window.localStorage.setItem('metaPrivateKey', metaPrivateKey);\n          // now expire the cookie\n          var _expires = new Date();\n          _expires.setDate(_expires.getDate() - 1);\n          cookie.save('metaPrivateKey', 0, {\n            path: '/',\n            expires: _expires\n          });\n        }\n      }\n      var metaAccount;\n      var account = 0;\n      if (metaPrivateKey && metaPrivateKey !== '0') {\n        var tempweb3 = new Web3();\n        metaAccount = tempweb3.eth.accounts.privateKeyToAccount(metaPrivateKey);\n        account = metaAccount.address.toLowerCase();\n      } else if (queryParams.privateKey) {\n        metaPrivateKey = queryParams.privateKey;\n        if (window.localStorage && typeof window.localStorage.setItem === 'function') {\n          window.localStorage.setItem('metaPrivateKey', queryParams.privateKey);\n        } else {\n          var _expires2 = new Date();\n          _expires2.setDate(_expires2.getDate() + 365);\n          cookie.save('metaPrivateKey', queryParams.privateKey, {\n            path: '/',\n            expires: _expires2\n          });\n        }\n        // window.location = window.location.href.split('?')[0];\n      }\n\n      if (!this.state.account && account) {\n        this.setState({\n          account: account,\n          metaAccount: metaAccount\n        }, function () {\n          console.log('DAPP ONUPDATE', _this2.state);\n          _this2.props.onUpdate(Object.assign({}, _this2.state));\n        });\n      }\n    }\n  }, {\n    key: \"inspectNetwork\",\n    value: function inspectNetwork(networkId) {\n      var _this3 = this;\n      if (this.state.config.DEBUG) console.log('DAPPARATUS - network', networkId);\n      if (this.state.config.DEBUG) console.log('DAPPARATUS - translated network', translateNetwork(networkId));\n      try {\n        if (this.state.config.DEBUG) console.log('DAPPARATUS - getting accounts...');\n        window.web3.eth.getAccounts(function (err, _accounts) {\n          if (_this3.state.config.DEBUG) console.log('ACCOUNTS', err, _accounts);\n          if (!_accounts || _accounts.length <= 0 || _this3.state.web3Fellback) {\n            if (_this3.state.config.DEBUG) console.log('DAPPARATUS - no inject accounts - generate? ');\n            if (!_this3.state.metaAccount || !_this3.state.metaAccount.address) {\n              _this3.setState({\n                status: 'noaccount'\n              }, function () {\n                try {\n                  var metaPrivateKey;\n                  if (window.localStorage && typeof window.localStorage.setItem === 'function') {\n                    metaPrivateKey = window.localStorage.getItem('metaPrivateKey');\n                    if (metaPrivateKey === '0') metaPrivateKey = false;\n                    if (metaPrivateKey && metaPrivateKey.length !== 66) metaPrivateKey = false;\n                  }\n                  if (!metaPrivateKey) {\n                    console.log('Generating account...');\n                    var result = window.web3.eth.accounts.create();\n                    if (window.localStorage && typeof window.localStorage.setItem === 'function') {\n                      window.localStorage.setItem('metaPrivateKey', result.privateKey);\n                    } else {\n                      var expires = new Date();\n                      expires.setDate(expires.getDate() + 365);\n                      cookie.save('metaPrivateKey', result.privateKey, {\n                        path: '/',\n                        expires: expires\n                      });\n                    }\n                    metaPrivateKey = result.privateKey;\n                  } else {\n                    console.log('Loaded existing metaPK...');\n                  }\n                  var tempweb3 = new Web3();\n                  var metaAccount = tempweb3.eth.accounts.privateKeyToAccount(metaPrivateKey);\n                  var account = metaAccount.address.toLowerCase();\n                  _this3.setState({\n                    metaAccount: metaAccount,\n                    account: account,\n                    burnMetaAccount: burnMetaAccount\n                  }, function () {\n                    _this3.props.onUpdate(Object.assign({}, _this3.state));\n                  });\n                } catch (e) {\n                  console.log(e);\n                }\n              });\n            } else {\n              var currentAccounts = [];\n              // console.log(\"generated account\",this.state.metaAccount)\n              currentAccounts.push(_this3.state.metaAccount.address);\n              // console.log(\"currentAccounts\",currentAccounts)\n              _this3.inspectAccounts(currentAccounts, networkId);\n            }\n            if (_this3.state.metaAccount) {\n              // console.log(\"metaAccount\",this.state.metaAccount)\n              _this3.updateInfo(_this3.state.metaAccount.address, networkId);\n            } else {\n              // console.lob(\"no metaAccount\")\n            }\n          } else {\n            if (_this3.state.config.DEBUG) {\n              console.log('DAPPARATUS - injected account: ', _accounts);\n            }\n\n            // there is a strange bug where we end up with a meta account and then web3 is injected\n            // What I want to do here is clear any window.localStorage if web3 is injected\n            // burnMetaAccount(true)\n\n            _this3.inspectAccounts(_accounts, networkId);\n            _this3.setState({\n              metaAccount: false\n            });\n          }\n        });\n      } catch (e) {\n        console.log(e);\n        if (this.state.metamask !== -1) {\n          this.setState({\n            metamask: -1,\n            networkId: networkId,\n            network: translateNetwork(networkId),\n            web3: window.web3\n          });\n        }\n      }\n    }\n  }, {\n    key: \"inspectAccounts\",\n    value: function inspectAccounts(currentAccounts, networkId) {\n      if (this.state.config.DEBUG) {\n        console.log('DAPPARATUS - accounts:', currentAccounts, this.state.account);\n      }\n      if (currentAccounts && this.state.account) {\n        if (currentAccounts.length <= 0) {\n          // window.location.reload(true);\n          console.log('RELOAD BECAUSE LOST ACCOUNTS?');\n        } else if (!this.state.metaAccount && this.state.account !== currentAccounts[0].toLowerCase()) {\n          window.location.reload(true);\n          console.log('RELOAD BECAUSE DIFFERENT ACCOUNTS?');\n        }\n      } else {\n        this.updateInfo(currentAccounts[0].toLowerCase(), networkId);\n      }\n    }\n  }, {\n    key: \"updateInfo\",\n    value: function updateInfo(account, networkId) {\n      var _this4 = this;\n      // if (this.state.config.DEBUG) console.log(\"Adjusted balance\",balance)\n      var etherscan = 'https://etherscan.io/';\n      var network = translateNetwork(networkId);\n      if (network !== 'Mainnet') {\n        etherscan = 'https://' + network.toLowerCase() + '.etherscan.io/';\n      }\n      if (this.state.status !== 'ready') {\n        var update = {\n          status: 'ready',\n          networkId: networkId,\n          network: network,\n          web3Provider: window.web3.currentProvider,\n          etherscan: etherscan,\n          account: account.toLowerCase(),\n          metaAccount: this.state.metaAccount\n        };\n        this.setState(update, function () {\n          _this4.props.onUpdate(Object.assign({}, _this4.state));\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n  return Dapparatus;\n}(Component);\nexport default Dapparatus;","map":{"version":3,"names":["Component","cookie","deepmerge","Web3","queryString","require","interval","defaultConfig","DEBUG","POLLINTERVAL","requiredNetwork","burnMetaAccount","skipReload","window","localStorage","setItem","expires","Date","setDate","getDate","save","path","setTimeout","location","reload","translateNetwork","id","networks","Dapparatus","props","config","console","log","state","status","networkId","account","etherscan","metaAccount","web3Fellback","setState","setInterval","checkMetamask","bind","clearInterval","web3","version","eth","currentProvider","isMetaMask","fallbackWeb3Provider","onUpdate","Object","assign","getNetwork","net","getId","err","inspectNetwork","queryParams","parse","search","metaPrivateKey","newPrivateKey","indexOf","getItem","length","load","tempweb3","accounts","privateKeyToAccount","address","toLowerCase","privateKey","getAccounts","_accounts","result","create","e","currentAccounts","push","inspectAccounts","updateInfo","metamask","network","update","web3Provider"],"sources":["/home/cryptodev/Dev/aegis-burner/src/components/dapparatus.js"],"sourcesContent":["import { Component } from 'react'\nimport cookie from 'react-cookies'\nimport deepmerge from 'deepmerge'\nimport Web3 from 'web3'\n\nconst queryString = require('query-string')\n\nlet interval\nconst defaultConfig = {}\ndefaultConfig.DEBUG = false\ndefaultConfig.POLLINTERVAL = 1777\n\ndefaultConfig.requiredNetwork = [\n  'Mainnet',\n  'Unknown' // allow local RPC for testing\n]\n\nconst burnMetaAccount = (skipReload) => {\n  if (window.localStorage && typeof window.localStorage.setItem === 'function') {\n    // window.localStorage.setItem(this.state.account + 'metaPrivateKey', '')\n    window.localStorage.setItem('metaPrivateKey', '')\n  } else {\n    const expires = new Date()\n    expires.setDate(expires.getDate() - 1)\n    cookie.save('metaPrivateKey', 0, {\n      path: '/',\n      expires: expires\n    })\n  }\n  if (!skipReload) {\n    setTimeout(() => {\n      window.location.reload(true)\n    }, 300)\n  }\n}\nfunction translateNetwork (id) {\n  const networks = {\n    1: 'Mainnet',\n    2: 'Morden',\n    3: 'Ropsten',\n    4: 'Rinkeby',\n    5: 'Goerli',\n    42: 'Kovan',\n    99: 'POA',\n    100: 'xDai',\n    1337: 'Local',\n    5777: 'Ganache'\n  }\n  return networks[id] || 'Unknown'\n}\n\nclass Dapparatus extends Component {\n  constructor (props) {\n    super(props)\n    let config = defaultConfig\n\n    if (props.config) {\n      config = deepmerge(config, props.config)\n      if (props.config.requiredNetwork && props.config.requiredNetwork[0] !== '') {\n        config.requiredNetwork = props.config.requiredNetwork\n      }\n    }\n\n    console.log('!!!!DAPPARATUS~~~~~ ', config)\n\n    this.state = {\n      status: 'loading',\n      networkId: 0,\n      account: false,\n      etherscan: '',\n      config: config,\n      metaAccount: false,\n      burnMetaAccount: burnMetaAccount,\n      web3Fellback: false\n    }\n  }\n\n  componentDidUpdate () {\n    if (this.props.config) {\n      const requiredNetwork = this.props.config.requiredNetwork\n      const config = this.state.config\n      if (requiredNetwork && requiredNetwork[0] !== '' && config.requiredNetwork !== requiredNetwork) {\n        config.requiredNetwork = requiredNetwork\n        this.setState({ config: config })\n      }\n    }\n  }\n\n  componentDidMount () {\n    interval = setInterval(\n      this.checkMetamask.bind(this),\n      this.state.config.POLLINTERVAL\n    )\n    this.checkMetamask()\n  }\n\n  componentWillUnmount () {\n    clearInterval(interval)\n  }\n\n  checkMetamask () {\n    if (this.state.config.DEBUG) console.log('DAPPARATUS - checking state...')\n\n    /*\n    console.log(\"CHECK\")\n    try{\n      console.log(\"GETTING NETWORK \")\n      window.web3.version.getNetwork((err,network)=>{\n        console.log(\"GOT\")\n        console.log(err)\n        console.log(network)\n      })\n    }catch(e){\n      console.log(\"FAILED \")\n      console.log(e.toString())\n      this.fallBackToInfura()\n      return;\n    } */\n\n    if (typeof window.web3 === 'undefined' || (typeof window.web3.version === 'undefined' && typeof window.web3.eth === 'undefined') || window.web3.currentProvider.isMetaMask === true) {\n      console.log('NO WEB3 YET (or no web3.version / web3.eth)')\n      if (this.state.config.DEBUG) console.log('DAPPARATUS - no web3')\n      console.log('Connecting to ganache...', this.props.fallbackWeb3Provider)\n      window.web3 = new Web3(this.props.fallbackWeb3Provider) // CORS ISSUES!//\n      console.log(\"web3 loaded, reporting as 'fellback'\")\n      // window.web3 = new Web3(new Web3.providers.WebsocketProvider('wss://rinkeby.infura.io/ws'))\n      if (this.state.status === 'loading') {\n        this.setState({ web3Fellback: true, status: 'noweb3' }, () => {\n          this.props.onUpdate(Object.assign({}, this.state))\n        })\n      } else if (this.state.status !== 'noweb3') {\n        if (this.state.config.DEBUG) console.log('DAPPARATUS - lost web3')\n        /// window.location.reload(true);\n        this.setState({ web3Fellback: true, status: 'error' }, () => {\n          this.props.onUpdate(Object.assign({}, this.state))\n        })\n      }\n    } else {\n      if (this.state.config.DEBUG) {\n        console.log('DAPPARATUS - yes web 3', window.web3)\n      }\n      if (typeof window.web3.version === 'undefined' || typeof window.web3.version.getNetwork !== 'function') {\n        // console.log(\"cant use version to get network, trying web3.eth.net ...\")\n        window.web3.eth.net.getId((err, networkId) => {\n          if (this.state.config.DEBUG) console.log('NETWORK GETID', err, networkId)\n          this.inspectNetwork(networkId)\n        })\n      } else {\n        window.web3.version.getNetwork((err, networkId) => {\n          if (this.state.config.DEBUG) console.log('NETWORK GETNET', err, networkId)\n          this.inspectNetwork(networkId)\n        })\n      }\n    }\n\n    const queryParams = queryString.parse(window.location.search)\n    let metaPrivateKey\n    if (this.props.newPrivateKey) {\n      console.log('DAPPARATUS - NEW PRIVATE KEY')\n      metaPrivateKey = this.props.newPrivateKey\n      if (metaPrivateKey.indexOf('0x') !== 0) {\n        metaPrivateKey = '0x' + metaPrivateKey\n      }\n      // console.log(\"SAVING HARD CODED PRIVATE KEY\",metaPrivateKey)\n      if (window.localStorage && typeof window.localStorage.setItem === 'function') {\n        window.localStorage.setItem('metaPrivateKey', metaPrivateKey)\n      } else {\n        const expires = new Date()\n        expires.setDate(expires.getDate() + 365)\n        cookie.save('metaPrivateKey', metaPrivateKey, {\n          path: '/',\n          expires\n        })\n      }\n      console.log('Clearing new private key...')\n      this.setState({ newPrivateKey: false }, () => {\n        // this is clunky, but reload once they enter a pk for now\n        window.location = '/'\n      })\n    } else if (window.localStorage && typeof window.localStorage.setItem === 'function') {\n      metaPrivateKey = window.localStorage.getItem('metaPrivateKey')\n      if (metaPrivateKey === '0') metaPrivateKey = false\n      if (metaPrivateKey && metaPrivateKey.length !== 66) metaPrivateKey = false\n    }\n    if (!metaPrivateKey) {\n      metaPrivateKey = cookie.load('metaPrivateKey')\n      // what we need to do is convert someone over to window.localStorage from a cookie too...\n      // (we used to use cookies and we upgraded to window.localStorage)\n      if (metaPrivateKey && window.localStorage && typeof window.localStorage.setItem === 'function') {\n        window.localStorage.setItem('metaPrivateKey', metaPrivateKey)\n        // now expire the cookie\n        const expires = new Date()\n        expires.setDate(expires.getDate() - 1)\n        cookie.save('metaPrivateKey', 0, {\n          path: '/',\n          expires: expires\n        })\n      }\n    }\n\n    let metaAccount\n    let account = 0\n    if (metaPrivateKey && metaPrivateKey !== '0') {\n      const tempweb3 = new Web3()\n      metaAccount = tempweb3.eth.accounts.privateKeyToAccount(metaPrivateKey)\n      account = metaAccount.address.toLowerCase()\n    } else if (queryParams.privateKey) {\n      metaPrivateKey = queryParams.privateKey\n      if (window.localStorage && typeof window.localStorage.setItem === 'function') {\n        window.localStorage.setItem('metaPrivateKey', queryParams.privateKey)\n      } else {\n        const expires = new Date()\n        expires.setDate(expires.getDate() + 365)\n        cookie.save('metaPrivateKey', queryParams.privateKey, {\n          path: '/',\n          expires\n        })\n      }\n      // window.location = window.location.href.split('?')[0];\n    }\n    if (!this.state.account && account) {\n      this.setState({ account, metaAccount }, () => {\n        console.log('DAPP ONUPDATE', this.state)\n        this.props.onUpdate(Object.assign({}, this.state))\n      })\n    }\n  }\n\n  inspectNetwork (networkId) {\n    if (this.state.config.DEBUG) console.log('DAPPARATUS - network', networkId)\n    if (this.state.config.DEBUG) console.log('DAPPARATUS - translated network', translateNetwork(networkId))\n    try {\n      if (this.state.config.DEBUG) console.log('DAPPARATUS - getting accounts...')\n      window.web3.eth.getAccounts((err, _accounts) => {\n        if (this.state.config.DEBUG) console.log('ACCOUNTS', err, _accounts)\n        if (!_accounts || _accounts.length <= 0 || this.state.web3Fellback) {\n          if (this.state.config.DEBUG) console.log('DAPPARATUS - no inject accounts - generate? ')\n          if (!this.state.metaAccount || !this.state.metaAccount.address) {\n            this.setState({ status: 'noaccount' }, () => {\n              try {\n                let metaPrivateKey\n                if (window.localStorage && typeof window.localStorage.setItem === 'function') {\n                  metaPrivateKey = window.localStorage.getItem('metaPrivateKey')\n                  if (metaPrivateKey === '0') metaPrivateKey = false\n                  if (metaPrivateKey && metaPrivateKey.length !== 66) metaPrivateKey = false\n                }\n                if (!metaPrivateKey) {\n                  console.log('Generating account...')\n                  const result = window.web3.eth.accounts.create()\n                  if (window.localStorage && typeof window.localStorage.setItem === 'function') {\n                    window.localStorage.setItem('metaPrivateKey', result.privateKey)\n                  } else {\n                    const expires = new Date()\n                    expires.setDate(expires.getDate() + 365)\n                    cookie.save('metaPrivateKey', result.privateKey, {\n                      path: '/',\n                      expires\n                    })\n                  }\n                  metaPrivateKey = result.privateKey\n                } else {\n                  console.log('Loaded existing metaPK...')\n                }\n\n                const tempweb3 = new Web3()\n                const metaAccount = tempweb3.eth.accounts.privateKeyToAccount(metaPrivateKey)\n                const account = metaAccount.address.toLowerCase()\n\n                this.setState({ metaAccount: metaAccount, account: account, burnMetaAccount: burnMetaAccount }, () => {\n                  this.props.onUpdate(Object.assign({}, this.state))\n                })\n              } catch (e) {\n                console.log(e)\n              }\n            })\n          } else {\n            const currentAccounts = []\n            // console.log(\"generated account\",this.state.metaAccount)\n            currentAccounts.push(this.state.metaAccount.address)\n            // console.log(\"currentAccounts\",currentAccounts)\n            this.inspectAccounts(currentAccounts, networkId)\n          }\n          if (this.state.metaAccount) {\n            // console.log(\"metaAccount\",this.state.metaAccount)\n            this.updateInfo(this.state.metaAccount.address, networkId)\n          } else {\n            // console.lob(\"no metaAccount\")\n          }\n        } else {\n          if (this.state.config.DEBUG) {\n            console.log('DAPPARATUS - injected account: ', _accounts)\n          }\n\n          // there is a strange bug where we end up with a meta account and then web3 is injected\n          // What I want to do here is clear any window.localStorage if web3 is injected\n          // burnMetaAccount(true)\n\n          this.inspectAccounts(_accounts, networkId)\n          this.setState({ metaAccount: false })\n        }\n      })\n    } catch (e) {\n      console.log(e)\n      if (this.state.metamask !== -1) { this.setState({ metamask: -1, networkId: networkId, network: translateNetwork(networkId), web3: window.web3 }) }\n    }\n  }\n\n  inspectAccounts (currentAccounts, networkId) {\n    if (this.state.config.DEBUG) {\n      console.log(\n        'DAPPARATUS - accounts:',\n        currentAccounts,\n        this.state.account\n      )\n    }\n    if (currentAccounts && this.state.account) {\n      if (currentAccounts.length <= 0) {\n        // window.location.reload(true);\n        console.log('RELOAD BECAUSE LOST ACCOUNTS?')\n      } else if (!this.state.metaAccount && this.state.account !== currentAccounts[0].toLowerCase()) {\n        window.location.reload(true)\n        console.log('RELOAD BECAUSE DIFFERENT ACCOUNTS?')\n      }\n    } else {\n      this.updateInfo(currentAccounts[0].toLowerCase(), networkId)\n    }\n  }\n\n  updateInfo (account, networkId) {\n    // if (this.state.config.DEBUG) console.log(\"Adjusted balance\",balance)\n    let etherscan = 'https://etherscan.io/'\n    const network = translateNetwork(networkId)\n    if (network !== 'Mainnet') {\n      etherscan = 'https://' + network.toLowerCase() + '.etherscan.io/'\n    }\n\n    if (this.state.status !== 'ready') {\n      const update = {\n        status: 'ready',\n        networkId: networkId,\n        network: network,\n        web3Provider: window.web3.currentProvider,\n        etherscan: etherscan,\n        account: account.toLowerCase(),\n        metaAccount: this.state.metaAccount\n      }\n\n      this.setState(update, () => {\n        this.props.onUpdate(Object.assign({}, this.state))\n      })\n    }\n  }\n\n  render () {\n    return null\n  }\n}\nexport default Dapparatus\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}