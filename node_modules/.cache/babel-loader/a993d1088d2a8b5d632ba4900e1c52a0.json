{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/cryptodev/Dev/aegis-burner/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar createHash = require(\"create-hash\");\nvar pbkdf2_1 = require(\"pbkdf2\");\nvar randomBytes = require(\"randombytes\");\nvar _wordlists_1 = require(\"./_wordlists\");\nvar DEFAULT_WORDLIST = _wordlists_1._default;\nvar INVALID_MNEMONIC = 'Invalid mnemonic';\nvar INVALID_ENTROPY = 'Invalid entropy';\nvar INVALID_CHECKSUM = 'Invalid mnemonic checksum';\nvar WORDLIST_REQUIRED = 'A wordlist is required but a default could not be found.\\n' + 'Please explicitly pass a 2048 word array explicitly.';\nfunction lpad(str, padString, length) {\n  while (str.length < length) {\n    str = padString + str;\n  }\n  return str;\n}\nfunction binaryToByte(bin) {\n  return parseInt(bin, 2);\n}\nfunction bytesToBinary(bytes) {\n  return bytes.map(function (x) {\n    return lpad(x.toString(2), '0', 8);\n  }).join('');\n}\nfunction deriveChecksumBits(entropyBuffer) {\n  var ENT = entropyBuffer.length * 8;\n  var CS = ENT / 32;\n  var hash = createHash('sha256').update(entropyBuffer).digest();\n  return bytesToBinary(_toConsumableArray(hash)).slice(0, CS);\n}\nfunction salt(password) {\n  return 'mnemonic' + (password || '');\n}\nfunction mnemonicToSeedSync(mnemonic, password) {\n  var mnemonicBuffer = Buffer.from((mnemonic || '').normalize('NFKD'), 'utf8');\n  var saltBuffer = Buffer.from(salt((password || '').normalize('NFKD')), 'utf8');\n  return pbkdf2_1.pbkdf2Sync(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');\n}\nexports.mnemonicToSeedSync = mnemonicToSeedSync;\nfunction mnemonicToSeed(mnemonic, password) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var mnemonicBuffer = Buffer.from((mnemonic || '').normalize('NFKD'), 'utf8');\n      var saltBuffer = Buffer.from(salt((password || '').normalize('NFKD')), 'utf8');\n      pbkdf2_1.pbkdf2(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512', function (err, data) {\n        if (err) return reject(err);else return resolve(data);\n      });\n    } catch (error) {\n      return reject(error);\n    }\n  });\n}\nexports.mnemonicToSeed = mnemonicToSeed;\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n  wordlist = wordlist || DEFAULT_WORDLIST;\n  if (!wordlist) {\n    throw new Error(WORDLIST_REQUIRED);\n  }\n  var words = (mnemonic || '').normalize('NFKD').split(' ');\n  if (words.length % 3 !== 0) throw new Error(INVALID_MNEMONIC);\n  // convert word indices to 11 bit binary strings\n  var bits = words.map(function (word) {\n    var index = wordlist.indexOf(word);\n    if (index === -1) throw new Error(INVALID_MNEMONIC);\n    return lpad(index.toString(2), '0', 11);\n  }).join('');\n  // split the binary string into ENT/CS\n  var dividerIndex = Math.floor(bits.length / 33) * 32;\n  var entropyBits = bits.slice(0, dividerIndex);\n  var checksumBits = bits.slice(dividerIndex);\n  // calculate the checksum and compare\n  var entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);\n  if (entropyBytes.length < 16) throw new Error(INVALID_ENTROPY);\n  if (entropyBytes.length > 32) throw new Error(INVALID_ENTROPY);\n  if (entropyBytes.length % 4 !== 0) throw new Error(INVALID_ENTROPY);\n  var entropy = Buffer.from(entropyBytes);\n  var newChecksum = deriveChecksumBits(entropy);\n  if (newChecksum !== checksumBits) throw new Error(INVALID_CHECKSUM);\n  return entropy.toString('hex');\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\nfunction entropyToMnemonic(entropy, wordlist) {\n  if (!Buffer.isBuffer(entropy)) entropy = Buffer.from(entropy, 'hex');\n  wordlist = wordlist || DEFAULT_WORDLIST;\n  if (!wordlist) {\n    throw new Error(WORDLIST_REQUIRED);\n  }\n  // 128 <= ENT <= 256\n  if (entropy.length < 16) throw new TypeError(INVALID_ENTROPY);\n  if (entropy.length > 32) throw new TypeError(INVALID_ENTROPY);\n  if (entropy.length % 4 !== 0) throw new TypeError(INVALID_ENTROPY);\n  var entropyBits = bytesToBinary(_toConsumableArray(entropy));\n  var checksumBits = deriveChecksumBits(entropy);\n  var bits = entropyBits + checksumBits;\n  var chunks = bits.match(/(.{1,11})/g);\n  var words = chunks.map(function (binary) {\n    var index = binaryToByte(binary);\n    return wordlist[index];\n  });\n  return wordlist[0] === \"\\u3042\\u3044\\u3053\\u304F\\u3057\\u3093\" // Japanese wordlist\n  ? words.join(\"\\u3000\") : words.join(' ');\n}\nexports.entropyToMnemonic = entropyToMnemonic;\nfunction generateMnemonic(strength, rng, wordlist) {\n  strength = strength || 128;\n  if (strength % 32 !== 0) throw new TypeError(INVALID_ENTROPY);\n  rng = rng || randomBytes;\n  return entropyToMnemonic(rng(strength / 8), wordlist);\n}\nexports.generateMnemonic = generateMnemonic;\nfunction validateMnemonic(mnemonic, wordlist) {\n  try {\n    mnemonicToEntropy(mnemonic, wordlist);\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\nexports.validateMnemonic = validateMnemonic;\nfunction setDefaultWordlist(language) {\n  var result = _wordlists_1.wordlists[language];\n  if (result) DEFAULT_WORDLIST = result;else throw new Error('Could not find wordlist for language \"' + language + '\"');\n}\nexports.setDefaultWordlist = setDefaultWordlist;\nfunction getDefaultWordlist() {\n  if (!DEFAULT_WORDLIST) throw new Error('No Default Wordlist set');\n  return Object.keys(_wordlists_1.wordlists).filter(function (lang) {\n    if (lang === 'JA' || lang === 'EN') return false;\n    return _wordlists_1.wordlists[lang].every(function (word, index) {\n      return word === DEFAULT_WORDLIST[index];\n    });\n  })[0];\n}\nexports.getDefaultWordlist = getDefaultWordlist;\nvar _wordlists_2 = require(\"./_wordlists\");\nexports.wordlists = _wordlists_2.wordlists;","map":null,"metadata":{},"sourceType":"script"}