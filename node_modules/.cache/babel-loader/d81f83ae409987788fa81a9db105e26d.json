{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar bignumber_js_1 = require(\"bignumber.js\");\nvar activeState_1 = require(\"./activeState\");\nvar blockchain_1 = require(\"../services/blockchain\");\nvar store_1 = require(\"../store\");\nvar constants_1 = require(\"../constants\");\nexports.checkRegistration = function (address, token, registration) {\n  var clientRegistrationHash = activeState_1.hashActiveState({\n    token: token,\n    address: address,\n    eon: registration.eon,\n    trailIdentifier: 0,\n    transactionSetHash: constants_1.EMPTY_HASH,\n    spent: new bignumber_js_1.BigNumber(0),\n    gained: new bignumber_js_1.BigNumber(0)\n  });\n  var isClientRegistrationValid = blockchain_1.blockchain.validateSignature(clientRegistrationHash, registration.walletSignature, address);\n  if (!isClientRegistrationValid) return false;\n  var operatorRegistrationHash = activeState_1.hashActiveState({\n    address: address,\n    token: token,\n    eon: registration.eon,\n    trailIdentifier: registration.trailIdentifier,\n    transactionSetHash: constants_1.EMPTY_HASH,\n    spent: new bignumber_js_1.BigNumber(0),\n    gained: new bignumber_js_1.BigNumber(0)\n  });\n  var isOperatorRegistrationValid = blockchain_1.blockchain.validateSignature(operatorRegistrationHash, registration.operatorSignature, store_1.store.contractOwner);\n  if (!isOperatorRegistrationValid) return false;\n  return true;\n};","map":null,"metadata":{},"sourceType":"script"}