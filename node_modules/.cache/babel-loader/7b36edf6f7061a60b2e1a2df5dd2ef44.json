{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n  return ar;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar transaction_1 = require(\"../wallet/transaction\");\nvar constants_1 = require(\"../constants\");\nvar activeState_1 = require(\"../wallet/activeState\");\nvar merkleTree_1 = require(\"../wallet/merkleTree\");\nvar balanceMarker_1 = require(\"../wallet/balanceMarker\");\nvar blockchain_1 = require(\"./blockchain\");\nfunction createSwapOrderSignatures(config) {\n  return __awaiter(this, void 0, void 0, function () {\n    var creditAmount, debitAmount, creditWallet, debitWallet, nonce, creditStartingBalance, debitStartingBalance, eon, creditActiveStates, debitActiveStates, fulfillmentActiveStates, creditBalanceMarkers, debitBalanceMarkers, debitTransactionSetNodes, creditTransactionSetNodes, fulfilledTransactionSetNodes, i, creditSwap, debitSwap, fulfilledSwap, _a, creditSpent, creditGained, _b, debitSpent, debitGained, creditActiveState, debitActiveState, fulfillmentActiveState, creditBalanceMarker, debitBalanceMarker, swapWalletAddress, _c, creditActiveStateSignatures, debitActiveStateSignatures, creditBalanceSignatures, debitBalanceSignatures, fulfillmentActiveStateSignatures;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          creditAmount = config.creditAmount, debitAmount = config.debitAmount, creditWallet = config.creditWallet, debitWallet = config.debitWallet, nonce = config.nonce;\n          creditStartingBalance = creditWallet.currentEon.initialBalanceAllotment;\n          debitStartingBalance = debitWallet.currentEon.initialBalanceAllotment;\n          eon = debitWallet.currentEon.eon;\n          creditActiveStates = [];\n          debitActiveStates = [];\n          fulfillmentActiveStates = [];\n          creditBalanceMarkers = [];\n          debitBalanceMarkers = [];\n          debitTransactionSetNodes = debitWallet.currentEon.activeTransactions.map(function (t) {\n            return transaction_1.transactionToMerkleTree(t, debitWallet);\n          });\n          creditTransactionSetNodes = creditWallet.currentEon.activeTransactions.map(function (t) {\n            return transaction_1.transactionToMerkleTree(t, creditWallet);\n          });\n          fulfilledTransactionSetNodes = creditWallet.currentEon.activeTransactions.map(function (t) {\n            return transaction_1.transactionToMerkleTree(t, creditWallet);\n          });\n          for (i = 0; i < constants_1.SWAP_COUNT; i++) {\n            if (i !== 0) {\n              creditStartingBalance = constants_1.BN_ZERO;\n              debitStartingBalance = debitAmount;\n              debitTransactionSetNodes = [];\n              creditTransactionSetNodes = [];\n              fulfilledTransactionSetNodes = [];\n            }\n            creditSwap = {\n              amount: debitAmount,\n              amountSwapped: creditAmount,\n              creditToken: creditWallet.token,\n              debitToken: debitWallet.token,\n              nonce: nonce,\n              startingBalance: creditStartingBalance,\n              trailIdentifier: creditWallet.trailIdentifier\n            };\n            debitSwap = __assign(__assign({}, creditSwap), {\n              startingBalance: debitStartingBalance\n            });\n            fulfilledSwap = __assign(__assign({}, creditSwap), {\n              startingBalance: constants_1.BN_2_256_MINUS_1\n            });\n            creditTransactionSetNodes.push({\n              height: 0,\n              hash: transaction_1.hashSwap(creditSwap)\n            });\n            debitTransactionSetNodes.push({\n              height: 0,\n              hash: transaction_1.hashSwap(debitSwap)\n            });\n            fulfilledTransactionSetNodes.push({\n              height: 0,\n              hash: transaction_1.hashSwap(fulfilledSwap)\n            });\n            _a = creditWallet.currentEon.spentAndGained, creditSpent = _a.spent, creditGained = _a.gained;\n            _b = debitWallet.currentEon.spentAndGained, debitSpent = _b.spent, debitGained = _b.gained;\n            if (i > 0) {\n              creditSpent = constants_1.BN_ZERO;\n              creditGained = constants_1.BN_ZERO;\n              debitSpent = constants_1.BN_ZERO;\n              debitGained = constants_1.BN_ZERO;\n            }\n            creditActiveState = __assign(__assign({}, creditWallet.currentEon.activeState), {\n              spent: creditSpent,\n              gained: creditGained,\n              eon: eon + i,\n              transactionSetHash: merkleTree_1.constructMerkleTree(creditTransactionSetNodes).hash\n            });\n            debitActiveState = __assign(__assign({}, debitWallet.currentEon.activeState), {\n              spent: debitSpent.plus(debitAmount),\n              gained: debitGained,\n              eon: eon + i,\n              transactionSetHash: merkleTree_1.constructMerkleTree(debitTransactionSetNodes).hash\n            });\n            fulfillmentActiveState = __assign(__assign({}, creditWallet.currentEon.activeState), {\n              spent: creditSpent,\n              gained: creditGained.plus(creditAmount),\n              eon: eon + i,\n              transactionSetHash: merkleTree_1.constructMerkleTree(fulfilledTransactionSetNodes).hash\n            });\n            creditBalanceMarker = {\n              address: creditWallet.address,\n              balance: constants_1.BN_ZERO.toFixed(0),\n              eon: eon + i,\n              token: creditWallet.token\n            };\n            debitBalanceMarker = {\n              address: debitWallet.address,\n              balance: constants_1.BN_ZERO.toFixed(0),\n              eon: eon + i,\n              token: debitWallet.token\n            };\n            creditActiveStates.push(activeState_1.hashActiveState(creditActiveState));\n            debitActiveStates.push(activeState_1.hashActiveState(debitActiveState));\n            fulfillmentActiveStates.push(activeState_1.hashActiveState(fulfillmentActiveState));\n            creditBalanceMarkers.push(balanceMarker_1.hashBalanceMarker(creditBalanceMarker));\n            debitBalanceMarkers.push(balanceMarker_1.hashBalanceMarker(debitBalanceMarker));\n          }\n          swapWalletAddress = debitWallet.address;\n          return [4, Promise.all([Promise.all(__spread(creditActiveStates.map(function (hash) {\n            return blockchain_1.blockchain.sign(swapWalletAddress, hash);\n          }))), Promise.all(__spread(debitActiveStates.map(function (hash) {\n            return blockchain_1.blockchain.sign(swapWalletAddress, hash);\n          }))), Promise.all(__spread(creditBalanceMarkers.map(function (hash) {\n            return blockchain_1.blockchain.sign(swapWalletAddress, hash);\n          }))), Promise.all(__spread(debitBalanceMarkers.map(function (hash) {\n            return blockchain_1.blockchain.sign(swapWalletAddress, hash);\n          }))), Promise.all(__spread(fulfillmentActiveStates.map(function (hash) {\n            return blockchain_1.blockchain.sign(creditWallet.address, hash);\n          })))])];\n        case 1:\n          _c = __read.apply(void 0, [_d.sent(), 5]), creditActiveStateSignatures = _c[0], debitActiveStateSignatures = _c[1], creditBalanceSignatures = _c[2], debitBalanceSignatures = _c[3], fulfillmentActiveStateSignatures = _c[4];\n          return [2, {\n            creditActiveStateSignatures: creditActiveStateSignatures,\n            debitActiveStateSignatures: debitActiveStateSignatures,\n            fulfillmentActiveStateSignatures: fulfillmentActiveStateSignatures,\n            creditBalanceSignatures: creditBalanceSignatures,\n            debitBalanceSignatures: debitBalanceSignatures\n          }];\n      }\n    });\n  });\n}\nexports.createSwapOrderSignatures = createSwapOrderSignatures;\nfunction createCancellationSignatures(debitWallet, creditWallet, swap) {\n  return __awaiter(this, void 0, void 0, function () {\n    var debitCancellationHashes, creditCancellationHashes, creditSwapIndex, _a, debitSpent, debitGained, debitEonMatchedAmounts, debitCancellationActiveState, _b, creditSpent, creditGained, creditCancellationActiveState, swapEonCount, i, debitFutureSpentGained, creditFutureSpentGained, futureDebitCancellationActiveState, futureCreditCancellationActiveState, swapWalletAddress_1, _c, debitCancellationSignatures, creditCancellationSignatures, e_1;\n    return __generator(this, function (_d) {\n      switch (_d.label) {\n        case 0:\n          _d.trys.push([0, 3,, 4]);\n          debitCancellationHashes = [];\n          creditCancellationHashes = [];\n          creditSwapIndex = creditWallet.currentEon.transactions.findIndex(function (transaction) {\n            return transaction.id === swap.id;\n          });\n          creditWallet.currentEon.transactions[creditSwapIndex].cancelled = true;\n          _a = debitWallet.currentEon.spentAndGained, debitSpent = _a.spent, debitGained = _a.gained;\n          debitEonMatchedAmounts = debitWallet.currentEon.eonMatchedAmounts(swap);\n          debitCancellationActiveState = __assign(__assign({}, debitWallet.currentEon.activeState), {\n            spent: debitSpent,\n            gained: debitGained.plus(swap.amount).minus(debitEonMatchedAmounts.out)\n          });\n          _b = creditWallet.currentEon.spentAndGained, creditSpent = _b.spent, creditGained = _b.gained;\n          creditCancellationActiveState = __assign(__assign({}, creditWallet.currentEon.activeState), {\n            spent: creditSpent.plus(swap.amountSwapped),\n            gained: creditGained.plus(swap.amountSwapped)\n          });\n          debitCancellationHashes.push(activeState_1.hashActiveState(debitCancellationActiveState));\n          creditCancellationHashes.push(activeState_1.hashActiveState(creditCancellationActiveState));\n          return [4, transaction_1.getSwapEonCount(swap)];\n        case 1:\n          swapEonCount = _d.sent();\n          for (i = 1; i <= constants_1.SWAP_COUNT - swapEonCount; i++) {\n            debitFutureSpentGained = bignumber_js_1.default.max(debitSpent, debitGained.plus(swap.amount).minus(debitEonMatchedAmounts.out)).plus(1);\n            creditFutureSpentGained = bignumber_js_1.default.max(creditSpent, creditGained).plus(swap.amountSwapped).plus(1);\n            futureDebitCancellationActiveState = __assign(__assign({}, debitWallet.currentEon.activeState), {\n              transactionSetHash: constants_1.EMPTY_HASH,\n              eon: swap.eon + i,\n              spent: debitFutureSpentGained,\n              gained: debitFutureSpentGained\n            });\n            futureCreditCancellationActiveState = __assign(__assign({}, creditWallet.currentEon.activeState), {\n              transactionSetHash: constants_1.EMPTY_HASH,\n              eon: swap.eon + i,\n              spent: creditFutureSpentGained,\n              gained: creditFutureSpentGained\n            });\n            debitCancellationHashes.push(activeState_1.hashActiveState(futureDebitCancellationActiveState));\n            creditCancellationHashes.push(activeState_1.hashActiveState(futureCreditCancellationActiveState));\n          }\n          swapWalletAddress_1 = debitWallet.address;\n          return [4, Promise.all([Promise.all(__spread(debitCancellationHashes.map(function (hash) {\n            return blockchain_1.blockchain.sign(swapWalletAddress_1, hash);\n          }))), Promise.all(__spread(creditCancellationHashes.map(function (hash) {\n            return blockchain_1.blockchain.sign(swapWalletAddress_1, hash);\n          })))])];\n        case 2:\n          _c = __read.apply(void 0, [_d.sent(), 2]), debitCancellationSignatures = _c[0], creditCancellationSignatures = _c[1];\n          return [2, {\n            debitCancellationSignatures: debitCancellationSignatures,\n            creditCancellationSignatures: creditCancellationSignatures\n          }];\n        case 3:\n          e_1 = _d.sent();\n          return [2, Promise.reject(e_1)];\n        case 4:\n          return [2];\n      }\n    });\n  });\n}\nexports.createCancellationSignatures = createCancellationSignatures;\nfunction createFinalizationSignatures(creditWallet, swap) {\n  return __awaiter(this, void 0, void 0, function () {\n    var finalizationHashes, _a, creditSpent, creditGained, finalizationActiveState, swapEonCount, i, futureSpentGained, futureFinalizationActiveState, finalizationSignatures, e_2;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          _b.trys.push([0, 3,, 4]);\n          finalizationHashes = [];\n          _a = creditWallet.currentEon.spentAndGained, creditSpent = _a.spent, creditGained = _a.gained;\n          finalizationActiveState = __assign(__assign({}, creditWallet.currentEon.activeState), {\n            spent: creditSpent.plus(swap.amountSwapped),\n            gained: creditGained.plus(swap.amountSwapped)\n          });\n          finalizationHashes.push(activeState_1.hashActiveState(finalizationActiveState));\n          return [4, transaction_1.getSwapEonCount(swap)];\n        case 1:\n          swapEonCount = _b.sent();\n          for (i = 1; i <= constants_1.SWAP_COUNT - swapEonCount; i++) {\n            futureSpentGained = bignumber_js_1.default.max(creditSpent, creditGained).plus(swap.amountSwapped).plus(1);\n            futureFinalizationActiveState = __assign(__assign({}, creditWallet.currentEon.activeState), {\n              spent: futureSpentGained,\n              gained: futureSpentGained,\n              transactionSetHash: constants_1.EMPTY_HASH,\n              eon: swap.eon + i\n            });\n            finalizationHashes.push(activeState_1.hashActiveState(futureFinalizationActiveState));\n          }\n          return [4, Promise.all(__spread(finalizationHashes.map(function (hash) {\n            return blockchain_1.blockchain.sign(creditWallet.address, hash);\n          })))];\n        case 2:\n          finalizationSignatures = _b.sent();\n          return [2, {\n            finalizationSignatures: finalizationSignatures\n          }];\n        case 3:\n          e_2 = _b.sent();\n          return [2, Promise.reject(e_2)];\n        case 4:\n          return [2];\n      }\n    });\n  });\n}\nexports.createFinalizationSignatures = createFinalizationSignatures;","map":null,"metadata":{},"sourceType":"script"}