{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar EventEmitter = function () {\n  function EventEmitter() {\n    _classCallCheck(this, EventEmitter);\n    this.observers = {};\n  }\n  EventEmitter.prototype.on = function on(events, listener) {\n    var _this = this;\n    events.split(' ').forEach(function (event) {\n      _this.observers[event] = _this.observers[event] || [];\n      _this.observers[event].push(listener);\n    });\n    return this;\n  };\n  EventEmitter.prototype.off = function off(event, listener) {\n    var _this2 = this;\n    if (!this.observers[event]) {\n      return;\n    }\n    this.observers[event].forEach(function () {\n      if (!listener) {\n        delete _this2.observers[event];\n      } else {\n        var index = _this2.observers[event].indexOf(listener);\n        if (index > -1) {\n          _this2.observers[event].splice(index, 1);\n        }\n      }\n    });\n  };\n  EventEmitter.prototype.emit = function emit(event) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (this.observers[event]) {\n      var cloned = [].concat(this.observers[event]);\n      cloned.forEach(function (observer) {\n        observer.apply(undefined, args);\n      });\n    }\n    if (this.observers['*']) {\n      var _cloned = [].concat(this.observers['*']);\n      _cloned.forEach(function (observer) {\n        observer.apply(observer, [event].concat(args));\n      });\n    }\n  };\n  return EventEmitter;\n}();\nexport default EventEmitter;","map":null,"metadata":{},"sourceType":"module"}