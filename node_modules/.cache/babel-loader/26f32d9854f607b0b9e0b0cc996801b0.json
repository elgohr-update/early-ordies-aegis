{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar store_1 = require(\"../store\");\nvar operator_1 = require(\"../services/operator\");\nvar getEon_1 = __importDefault(require(\"./getEon\"));\nvar utils_1 = require(\"../helpers/utils\");\nfunction getMyOrders(address, baseTokenAddress, quoteTokenAddress) {\n  return __awaiter(this, void 0, void 0, function () {\n    var currentEon, promises, result;\n    var _this = this;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4, getEon_1.default()];\n        case 1:\n          currentEon = _a.sent();\n          if (!store_1.store.swapWallets.get(address)) return [2];\n          promises = store_1.store.swapWallets.get(address).map(function (subAddress) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var swaps, sortedSwaps, swapDict, sortedSwaps_1, sortedSwaps_1_1, swap, isBuy, status_1;\n              var e_1, _a;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4, operator_1.operator.getTransfers({\n                      search: utils_1.remove0x(subAddress),\n                      swap: true,\n                      ordering: 'time',\n                      limit: 1000\n                    })];\n                  case 1:\n                    swaps = _b.sent();\n                    swaps = swaps.filter(function (swap) {\n                      return swap.recipient.token === baseTokenAddress && swap.wallet.token === quoteTokenAddress || swap.wallet.token === baseTokenAddress && swap.recipient.token === quoteTokenAddress;\n                    });\n                    sortedSwaps = swaps.sort(function (a, b) {\n                      return a.eon - b.eon;\n                    });\n                    swapDict = {};\n                    try {\n                      for (sortedSwaps_1 = __values(sortedSwaps), sortedSwaps_1_1 = sortedSwaps_1.next(); !sortedSwaps_1_1.done; sortedSwaps_1_1 = sortedSwaps_1.next()) {\n                        swap = sortedSwaps_1_1.value;\n                        isBuy = swap.recipient.token === baseTokenAddress;\n                        if (!swap.voided && swap.eon <= currentEon) {\n                          status_1 = 'pending';\n                          if (swap.cancelled) {\n                            status_1 = 'cancelled';\n                          }\n                          if (swap.complete) {\n                            status_1 = 'complete';\n                          }\n                          swapDict[swap.txId] = {\n                            txId: swap.txId,\n                            id: swap.id,\n                            time: swap.time,\n                            baseTokenAddress: baseTokenAddress,\n                            quoteTokenAddress: quoteTokenAddress,\n                            amount: isBuy ? swap.amountSwapped : swap.amount,\n                            price: isBuy ? swap.amount.dividedBy(swap.amountSwapped) : swap.amountSwapped.dividedBy(swap.amount),\n                            status: status_1,\n                            eon: swap.eon,\n                            type: isBuy ? 'Buy' : 'Sell'\n                          };\n                        }\n                      }\n                    } catch (e_1_1) {\n                      e_1 = {\n                        error: e_1_1\n                      };\n                    } finally {\n                      try {\n                        if (sortedSwaps_1_1 && !sortedSwaps_1_1.done && (_a = sortedSwaps_1.return)) _a.call(sortedSwaps_1);\n                      } finally {\n                        if (e_1) throw e_1.error;\n                      }\n                    }\n                    return [2, Object.keys(swapDict).map(function (txId) {\n                      var swapsByTxId = sortedSwaps.filter(function (swap) {\n                        return swap.txId === txId;\n                      });\n                      var latestEonSwap = swapsByTxId.reverse()[0];\n                      var swap = swapDict[txId];\n                      if (swap.eon < currentEon && swap.status === 'pending') {\n                        swap.status = 'expired';\n                      }\n                      if (latestEonSwap.eon >= currentEon && swap.status === 'pending') {\n                        swap.expiry = latestEonSwap.eon - currentEon + 1;\n                      }\n                      return swap;\n                    })];\n                }\n              });\n            });\n          });\n          return [4, Promise.all(promises)];\n        case 2:\n          result = _a.sent();\n          return [2, result.reduce(function (total, arr) {\n            return total.concat(arr);\n          }, [])];\n      }\n    });\n  });\n}\nexports.default = getMyOrders;","map":null,"metadata":{},"sourceType":"script"}