{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar EventEmitter = function () {\n  function EventEmitter() {\n    this.listeners = new Map();\n  }\n  EventEmitter.prototype.on = function (event, callback) {\n    var _this = this;\n    if (!this.listeners.get(event)) this.listeners.set(event, []);\n    this.listeners.get(event).push(callback);\n    return function () {\n      var listeners = _this.listeners.get(event);\n      if (listeners) {\n        _this.listeners.set(event, listeners.filter(function (cb) {\n          return cb !== callback;\n        }));\n      }\n    };\n  };\n  EventEmitter.prototype.once = function (event, callback) {\n    var unsubscribe = this.on(event, function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      unsubscribe();\n      callback.apply(void 0, __spread(args));\n    });\n    return unsubscribe;\n  };\n  EventEmitter.prototype.emit = function (event) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    var listeners = this.listeners.get(event);\n    if (listeners) listeners.forEach(function (f) {\n      return f.apply(void 0, __spread(args));\n    });\n  };\n  EventEmitter.prototype.removeEventAllListeners = function () {\n    this.listeners = new Map();\n  };\n  return EventEmitter;\n}();\nexports.EventEmitter = EventEmitter;","map":null,"metadata":{},"sourceType":"script"}