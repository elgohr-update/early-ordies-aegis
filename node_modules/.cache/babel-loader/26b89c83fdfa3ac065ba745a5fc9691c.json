{"ast":null,"code":"// HumanizeDuration.js - https://git.io/j0HgmQ\n\n;\n(function () {\n  // This has to be defined separately because of a bug: we want to alias\n  // `gr` and `el` for backwards-compatiblity. In a breaking change, we can\n  // remove `gr` entirely.\n  // See https://github.com/EvanHahn/HumanizeDuration.js/issues/143 for more.\n  var greek = {\n    y: function y(c) {\n      return c === 1 ? 'χρόνος' : 'χρόνια';\n    },\n    mo: function mo(c) {\n      return c === 1 ? 'μήνας' : 'μήνες';\n    },\n    w: function w(c) {\n      return c === 1 ? 'εβδομάδα' : 'εβδομάδες';\n    },\n    d: function d(c) {\n      return c === 1 ? 'μέρα' : 'μέρες';\n    },\n    h: function h(c) {\n      return c === 1 ? 'ώρα' : 'ώρες';\n    },\n    m: function m(c) {\n      return c === 1 ? 'λεπτό' : 'λεπτά';\n    },\n    s: function s(c) {\n      return c === 1 ? 'δευτερόλεπτο' : 'δευτερόλεπτα';\n    },\n    ms: function ms(c) {\n      return c === 1 ? 'χιλιοστό του δευτερολέπτου' : 'χιλιοστά του δευτερολέπτου';\n    },\n    decimal: ','\n  };\n  var languages = {\n    ar: {\n      y: function y(c) {\n        return c === 1 ? 'سنة' : 'سنوات';\n      },\n      mo: function mo(c) {\n        return c === 1 ? 'شهر' : 'أشهر';\n      },\n      w: function w(c) {\n        return c === 1 ? 'أسبوع' : 'أسابيع';\n      },\n      d: function d(c) {\n        return c === 1 ? 'يوم' : 'أيام';\n      },\n      h: function h(c) {\n        return c === 1 ? 'ساعة' : 'ساعات';\n      },\n      m: function m(c) {\n        return ['دقيقة', 'دقائق'][getArabicForm(c)];\n      },\n      s: function s(c) {\n        return c === 1 ? 'ثانية' : 'ثواني';\n      },\n      ms: function ms(c) {\n        return c === 1 ? 'جزء من الثانية' : 'أجزاء من الثانية';\n      },\n      decimal: ','\n    },\n    bg: {\n      y: function y(c) {\n        return ['години', 'година', 'години'][getSlavicForm(c)];\n      },\n      mo: function mo(c) {\n        return ['месеца', 'месец', 'месеца'][getSlavicForm(c)];\n      },\n      w: function w(c) {\n        return ['седмици', 'седмица', 'седмици'][getSlavicForm(c)];\n      },\n      d: function d(c) {\n        return ['дни', 'ден', 'дни'][getSlavicForm(c)];\n      },\n      h: function h(c) {\n        return ['часа', 'час', 'часа'][getSlavicForm(c)];\n      },\n      m: function m(c) {\n        return ['минути', 'минута', 'минути'][getSlavicForm(c)];\n      },\n      s: function s(c) {\n        return ['секунди', 'секунда', 'секунди'][getSlavicForm(c)];\n      },\n      ms: function ms(c) {\n        return ['милисекунди', 'милисекунда', 'милисекунди'][getSlavicForm(c)];\n      },\n      decimal: ','\n    },\n    ca: {\n      y: function y(c) {\n        return 'any' + (c === 1 ? '' : 's');\n      },\n      mo: function mo(c) {\n        return 'mes' + (c === 1 ? '' : 'os');\n      },\n      w: function w(c) {\n        return 'setman' + (c === 1 ? 'a' : 'es');\n      },\n      d: function d(c) {\n        return 'di' + (c === 1 ? 'a' : 'es');\n      },\n      h: function h(c) {\n        return 'hor' + (c === 1 ? 'a' : 'es');\n      },\n      m: function m(c) {\n        return 'minut' + (c === 1 ? '' : 's');\n      },\n      s: function s(c) {\n        return 'segon' + (c === 1 ? '' : 's');\n      },\n      ms: function ms(c) {\n        return 'milisegon' + (c === 1 ? '' : 's');\n      },\n      decimal: ','\n    },\n    cs: {\n      y: function y(c) {\n        return ['rok', 'roku', 'roky', 'let'][getCzechOrSlovakForm(c)];\n      },\n      mo: function mo(c) {\n        return ['měsíc', 'měsíce', 'měsíce', 'měsíců'][getCzechOrSlovakForm(c)];\n      },\n      w: function w(c) {\n        return ['týden', 'týdne', 'týdny', 'týdnů'][getCzechOrSlovakForm(c)];\n      },\n      d: function d(c) {\n        return ['den', 'dne', 'dny', 'dní'][getCzechOrSlovakForm(c)];\n      },\n      h: function h(c) {\n        return ['hodina', 'hodiny', 'hodiny', 'hodin'][getCzechOrSlovakForm(c)];\n      },\n      m: function m(c) {\n        return ['minuta', 'minuty', 'minuty', 'minut'][getCzechOrSlovakForm(c)];\n      },\n      s: function s(c) {\n        return ['sekunda', 'sekundy', 'sekundy', 'sekund'][getCzechOrSlovakForm(c)];\n      },\n      ms: function ms(c) {\n        return ['milisekunda', 'milisekundy', 'milisekundy', 'milisekund'][getCzechOrSlovakForm(c)];\n      },\n      decimal: ','\n    },\n    da: {\n      y: 'år',\n      mo: function mo(c) {\n        return 'måned' + (c === 1 ? '' : 'er');\n      },\n      w: function w(c) {\n        return 'uge' + (c === 1 ? '' : 'r');\n      },\n      d: function d(c) {\n        return 'dag' + (c === 1 ? '' : 'e');\n      },\n      h: function h(c) {\n        return 'time' + (c === 1 ? '' : 'r');\n      },\n      m: function m(c) {\n        return 'minut' + (c === 1 ? '' : 'ter');\n      },\n      s: function s(c) {\n        return 'sekund' + (c === 1 ? '' : 'er');\n      },\n      ms: function ms(c) {\n        return 'millisekund' + (c === 1 ? '' : 'er');\n      },\n      decimal: ','\n    },\n    de: {\n      y: function y(c) {\n        return 'Jahr' + (c === 1 ? '' : 'e');\n      },\n      mo: function mo(c) {\n        return 'Monat' + (c === 1 ? '' : 'e');\n      },\n      w: function w(c) {\n        return 'Woche' + (c === 1 ? '' : 'n');\n      },\n      d: function d(c) {\n        return 'Tag' + (c === 1 ? '' : 'e');\n      },\n      h: function h(c) {\n        return 'Stunde' + (c === 1 ? '' : 'n');\n      },\n      m: function m(c) {\n        return 'Minute' + (c === 1 ? '' : 'n');\n      },\n      s: function s(c) {\n        return 'Sekunde' + (c === 1 ? '' : 'n');\n      },\n      ms: function ms(c) {\n        return 'Millisekunde' + (c === 1 ? '' : 'n');\n      },\n      decimal: ','\n    },\n    el: greek,\n    en: {\n      y: function y(c) {\n        return 'year' + (c === 1 ? '' : 's');\n      },\n      mo: function mo(c) {\n        return 'month' + (c === 1 ? '' : 's');\n      },\n      w: function w(c) {\n        return 'week' + (c === 1 ? '' : 's');\n      },\n      d: function d(c) {\n        return 'day' + (c === 1 ? '' : 's');\n      },\n      h: function h(c) {\n        return 'hour' + (c === 1 ? '' : 's');\n      },\n      m: function m(c) {\n        return 'minute' + (c === 1 ? '' : 's');\n      },\n      s: function s(c) {\n        return 'second' + (c === 1 ? '' : 's');\n      },\n      ms: function ms(c) {\n        return 'millisecond' + (c === 1 ? '' : 's');\n      },\n      decimal: '.'\n    },\n    es: {\n      y: function y(c) {\n        return 'año' + (c === 1 ? '' : 's');\n      },\n      mo: function mo(c) {\n        return 'mes' + (c === 1 ? '' : 'es');\n      },\n      w: function w(c) {\n        return 'semana' + (c === 1 ? '' : 's');\n      },\n      d: function d(c) {\n        return 'día' + (c === 1 ? '' : 's');\n      },\n      h: function h(c) {\n        return 'hora' + (c === 1 ? '' : 's');\n      },\n      m: function m(c) {\n        return 'minuto' + (c === 1 ? '' : 's');\n      },\n      s: function s(c) {\n        return 'segundo' + (c === 1 ? '' : 's');\n      },\n      ms: function ms(c) {\n        return 'milisegundo' + (c === 1 ? '' : 's');\n      },\n      decimal: ','\n    },\n    et: {\n      y: function y(c) {\n        return 'aasta' + (c === 1 ? '' : 't');\n      },\n      mo: function mo(c) {\n        return 'kuu' + (c === 1 ? '' : 'd');\n      },\n      w: function w(c) {\n        return 'nädal' + (c === 1 ? '' : 'at');\n      },\n      d: function d(c) {\n        return 'päev' + (c === 1 ? '' : 'a');\n      },\n      h: function h(c) {\n        return 'tund' + (c === 1 ? '' : 'i');\n      },\n      m: function m(c) {\n        return 'minut' + (c === 1 ? '' : 'it');\n      },\n      s: function s(c) {\n        return 'sekund' + (c === 1 ? '' : 'it');\n      },\n      ms: function ms(c) {\n        return 'millisekund' + (c === 1 ? '' : 'it');\n      },\n      decimal: ','\n    },\n    fa: {\n      y: 'سال',\n      mo: 'ماه',\n      w: 'هفته',\n      d: 'روز',\n      h: 'ساعت',\n      m: 'دقیقه',\n      s: 'ثانیه',\n      ms: 'میلی ثانیه',\n      decimal: '.'\n    },\n    fi: {\n      y: function y(c) {\n        return c === 1 ? 'vuosi' : 'vuotta';\n      },\n      mo: function mo(c) {\n        return c === 1 ? 'kuukausi' : 'kuukautta';\n      },\n      w: function w(c) {\n        return 'viikko' + (c === 1 ? '' : 'a');\n      },\n      d: function d(c) {\n        return 'päivä' + (c === 1 ? '' : 'ä');\n      },\n      h: function h(c) {\n        return 'tunti' + (c === 1 ? '' : 'a');\n      },\n      m: function m(c) {\n        return 'minuutti' + (c === 1 ? '' : 'a');\n      },\n      s: function s(c) {\n        return 'sekunti' + (c === 1 ? '' : 'a');\n      },\n      ms: function ms(c) {\n        return 'millisekunti' + (c === 1 ? '' : 'a');\n      },\n      decimal: ','\n    },\n    fo: {\n      y: 'ár',\n      mo: function mo(c) {\n        return c === 1 ? 'mánaður' : 'mánaðir';\n      },\n      w: function w(c) {\n        return c === 1 ? 'vika' : 'vikur';\n      },\n      d: function d(c) {\n        return c === 1 ? 'dagur' : 'dagar';\n      },\n      h: function h(c) {\n        return c === 1 ? 'tími' : 'tímar';\n      },\n      m: function m(c) {\n        return c === 1 ? 'minuttur' : 'minuttir';\n      },\n      s: 'sekund',\n      ms: 'millisekund',\n      decimal: ','\n    },\n    fr: {\n      y: function y(c) {\n        return 'an' + (c >= 2 ? 's' : '');\n      },\n      mo: 'mois',\n      w: function w(c) {\n        return 'semaine' + (c >= 2 ? 's' : '');\n      },\n      d: function d(c) {\n        return 'jour' + (c >= 2 ? 's' : '');\n      },\n      h: function h(c) {\n        return 'heure' + (c >= 2 ? 's' : '');\n      },\n      m: function m(c) {\n        return 'minute' + (c >= 2 ? 's' : '');\n      },\n      s: function s(c) {\n        return 'seconde' + (c >= 2 ? 's' : '');\n      },\n      ms: function ms(c) {\n        return 'milliseconde' + (c >= 2 ? 's' : '');\n      },\n      decimal: ','\n    },\n    gr: greek,\n    hr: {\n      y: function y(c) {\n        if (c % 10 === 2 || c % 10 === 3 || c % 10 === 4) {\n          return 'godine';\n        }\n        return 'godina';\n      },\n      mo: function mo(c) {\n        if (c === 1) {\n          return 'mjesec';\n        } else if (c === 2 || c === 3 || c === 4) {\n          return 'mjeseca';\n        }\n        return 'mjeseci';\n      },\n      w: function w(c) {\n        if (c % 10 === 1 && c !== 11) {\n          return 'tjedan';\n        }\n        return 'tjedna';\n      },\n      d: function d(c) {\n        return c === 1 ? 'dan' : 'dana';\n      },\n      h: function h(c) {\n        if (c === 1) {\n          return 'sat';\n        } else if (c === 2 || c === 3 || c === 4) {\n          return 'sata';\n        }\n        return 'sati';\n      },\n      m: function m(c) {\n        var mod10 = c % 10;\n        if ((mod10 === 2 || mod10 === 3 || mod10 === 4) && (c < 10 || c > 14)) {\n          return 'minute';\n        }\n        return 'minuta';\n      },\n      s: function s(c) {\n        if (c === 10 || c === 11 || c === 12 || c === 13 || c === 14 || c === 16 || c === 17 || c === 18 || c === 19 || c % 10 === 5) {\n          return 'sekundi';\n        } else if (c % 10 === 1) {\n          return 'sekunda';\n        } else if (c % 10 === 2 || c % 10 === 3 || c % 10 === 4) {\n          return 'sekunde';\n        }\n        return 'sekundi';\n      },\n      ms: function ms(c) {\n        if (c === 1) {\n          return 'milisekunda';\n        } else if (c % 10 === 2 || c % 10 === 3 || c % 10 === 4) {\n          return 'milisekunde';\n        }\n        return 'milisekundi';\n      },\n      decimal: ','\n    },\n    hu: {\n      y: 'év',\n      mo: 'hónap',\n      w: 'hét',\n      d: 'nap',\n      h: 'óra',\n      m: 'perc',\n      s: 'másodperc',\n      ms: 'ezredmásodperc',\n      decimal: ','\n    },\n    id: {\n      y: 'tahun',\n      mo: 'bulan',\n      w: 'minggu',\n      d: 'hari',\n      h: 'jam',\n      m: 'menit',\n      s: 'detik',\n      ms: 'milidetik',\n      decimal: '.'\n    },\n    is: {\n      y: 'ár',\n      mo: function mo(c) {\n        return 'mánuð' + (c === 1 ? 'ur' : 'ir');\n      },\n      w: function w(c) {\n        return 'vik' + (c === 1 ? 'a' : 'ur');\n      },\n      d: function d(c) {\n        return 'dag' + (c === 1 ? 'ur' : 'ar');\n      },\n      h: function h(c) {\n        return 'klukkutím' + (c === 1 ? 'i' : 'ar');\n      },\n      m: function m(c) {\n        return 'mínút' + (c === 1 ? 'a' : 'ur');\n      },\n      s: function s(c) {\n        return 'sekúnd' + (c === 1 ? 'a' : 'ur');\n      },\n      ms: function ms(c) {\n        return 'millisekúnd' + (c === 1 ? 'a' : 'ur');\n      },\n      decimal: '.'\n    },\n    it: {\n      y: function y(c) {\n        return 'ann' + (c === 1 ? 'o' : 'i');\n      },\n      mo: function mo(c) {\n        return 'mes' + (c === 1 ? 'e' : 'i');\n      },\n      w: function w(c) {\n        return 'settiman' + (c === 1 ? 'a' : 'e');\n      },\n      d: function d(c) {\n        return 'giorn' + (c === 1 ? 'o' : 'i');\n      },\n      h: function h(c) {\n        return 'or' + (c === 1 ? 'a' : 'e');\n      },\n      m: function m(c) {\n        return 'minut' + (c === 1 ? 'o' : 'i');\n      },\n      s: function s(c) {\n        return 'second' + (c === 1 ? 'o' : 'i');\n      },\n      ms: function ms(c) {\n        return 'millisecond' + (c === 1 ? 'o' : 'i');\n      },\n      decimal: ','\n    },\n    ja: {\n      y: '年',\n      mo: '月',\n      w: '週',\n      d: '日',\n      h: '時間',\n      m: '分',\n      s: '秒',\n      ms: 'ミリ秒',\n      decimal: '.'\n    },\n    ko: {\n      y: '년',\n      mo: '개월',\n      w: '주일',\n      d: '일',\n      h: '시간',\n      m: '분',\n      s: '초',\n      ms: '밀리 초',\n      decimal: '.'\n    },\n    lo: {\n      y: 'ປີ',\n      mo: 'ເດືອນ',\n      w: 'ອາທິດ',\n      d: 'ມື້',\n      h: 'ຊົ່ວໂມງ',\n      m: 'ນາທີ',\n      s: 'ວິນາທີ',\n      ms: 'ມິນລິວິນາທີ',\n      decimal: ','\n    },\n    lt: {\n      y: function y(c) {\n        return c % 10 === 0 || c % 100 >= 10 && c % 100 <= 20 ? 'metų' : 'metai';\n      },\n      mo: function mo(c) {\n        return ['mėnuo', 'mėnesiai', 'mėnesių'][getLithuanianForm(c)];\n      },\n      w: function w(c) {\n        return ['savaitė', 'savaitės', 'savaičių'][getLithuanianForm(c)];\n      },\n      d: function d(c) {\n        return ['diena', 'dienos', 'dienų'][getLithuanianForm(c)];\n      },\n      h: function h(c) {\n        return ['valanda', 'valandos', 'valandų'][getLithuanianForm(c)];\n      },\n      m: function m(c) {\n        return ['minutė', 'minutės', 'minučių'][getLithuanianForm(c)];\n      },\n      s: function s(c) {\n        return ['sekundė', 'sekundės', 'sekundžių'][getLithuanianForm(c)];\n      },\n      ms: function ms(c) {\n        return ['milisekundė', 'milisekundės', 'milisekundžių'][getLithuanianForm(c)];\n      },\n      decimal: ','\n    },\n    lv: {\n      y: function y(c) {\n        return ['gads', 'gadi'][getLatvianForm(c)];\n      },\n      mo: function mo(c) {\n        return ['mēnesis', 'mēneši'][getLatvianForm(c)];\n      },\n      w: function w(c) {\n        return ['nedēļa', 'nedēļas'][getLatvianForm(c)];\n      },\n      d: function d(c) {\n        return ['diena', 'dienas'][getLatvianForm(c)];\n      },\n      h: function h(c) {\n        return ['stunda', 'stundas'][getLatvianForm(c)];\n      },\n      m: function m(c) {\n        return ['minūte', 'minūtes'][getLatvianForm(c)];\n      },\n      s: function s(c) {\n        return ['sekunde', 'sekundes'][getLatvianForm(c)];\n      },\n      ms: function ms(c) {\n        return ['milisekunde', 'milisekundes'][getLatvianForm(c)];\n      },\n      decimal: ','\n    },\n    ms: {\n      y: 'tahun',\n      mo: 'bulan',\n      w: 'minggu',\n      d: 'hari',\n      h: 'jam',\n      m: 'minit',\n      s: 'saat',\n      ms: 'milisaat',\n      decimal: '.'\n    },\n    nl: {\n      y: 'jaar',\n      mo: function mo(c) {\n        return c === 1 ? 'maand' : 'maanden';\n      },\n      w: function w(c) {\n        return c === 1 ? 'week' : 'weken';\n      },\n      d: function d(c) {\n        return c === 1 ? 'dag' : 'dagen';\n      },\n      h: 'uur',\n      m: function m(c) {\n        return c === 1 ? 'minuut' : 'minuten';\n      },\n      s: function s(c) {\n        return c === 1 ? 'seconde' : 'seconden';\n      },\n      ms: function ms(c) {\n        return c === 1 ? 'milliseconde' : 'milliseconden';\n      },\n      decimal: ','\n    },\n    no: {\n      y: 'år',\n      mo: function mo(c) {\n        return 'måned' + (c === 1 ? '' : 'er');\n      },\n      w: function w(c) {\n        return 'uke' + (c === 1 ? '' : 'r');\n      },\n      d: function d(c) {\n        return 'dag' + (c === 1 ? '' : 'er');\n      },\n      h: function h(c) {\n        return 'time' + (c === 1 ? '' : 'r');\n      },\n      m: function m(c) {\n        return 'minutt' + (c === 1 ? '' : 'er');\n      },\n      s: function s(c) {\n        return 'sekund' + (c === 1 ? '' : 'er');\n      },\n      ms: function ms(c) {\n        return 'millisekund' + (c === 1 ? '' : 'er');\n      },\n      decimal: ','\n    },\n    pl: {\n      y: function y(c) {\n        return ['rok', 'roku', 'lata', 'lat'][getPolishForm(c)];\n      },\n      mo: function mo(c) {\n        return ['miesiąc', 'miesiąca', 'miesiące', 'miesięcy'][getPolishForm(c)];\n      },\n      w: function w(c) {\n        return ['tydzień', 'tygodnia', 'tygodnie', 'tygodni'][getPolishForm(c)];\n      },\n      d: function d(c) {\n        return ['dzień', 'dnia', 'dni', 'dni'][getPolishForm(c)];\n      },\n      h: function h(c) {\n        return ['godzina', 'godziny', 'godziny', 'godzin'][getPolishForm(c)];\n      },\n      m: function m(c) {\n        return ['minuta', 'minuty', 'minuty', 'minut'][getPolishForm(c)];\n      },\n      s: function s(c) {\n        return ['sekunda', 'sekundy', 'sekundy', 'sekund'][getPolishForm(c)];\n      },\n      ms: function ms(c) {\n        return ['milisekunda', 'milisekundy', 'milisekundy', 'milisekund'][getPolishForm(c)];\n      },\n      decimal: ','\n    },\n    pt: {\n      y: function y(c) {\n        return 'ano' + (c === 1 ? '' : 's');\n      },\n      mo: function mo(c) {\n        return c === 1 ? 'mês' : 'meses';\n      },\n      w: function w(c) {\n        return 'semana' + (c === 1 ? '' : 's');\n      },\n      d: function d(c) {\n        return 'dia' + (c === 1 ? '' : 's');\n      },\n      h: function h(c) {\n        return 'hora' + (c === 1 ? '' : 's');\n      },\n      m: function m(c) {\n        return 'minuto' + (c === 1 ? '' : 's');\n      },\n      s: function s(c) {\n        return 'segundo' + (c === 1 ? '' : 's');\n      },\n      ms: function ms(c) {\n        return 'milissegundo' + (c === 1 ? '' : 's');\n      },\n      decimal: ','\n    },\n    ro: {\n      y: function y(c) {\n        return c === 1 ? 'an' : 'ani';\n      },\n      mo: function mo(c) {\n        return c === 1 ? 'lună' : 'luni';\n      },\n      w: function w(c) {\n        return c === 1 ? 'săptămână' : 'săptămâni';\n      },\n      d: function d(c) {\n        return c === 1 ? 'zi' : 'zile';\n      },\n      h: function h(c) {\n        return c === 1 ? 'oră' : 'ore';\n      },\n      m: function m(c) {\n        return c === 1 ? 'minut' : 'minute';\n      },\n      s: function s(c) {\n        return c === 1 ? 'secundă' : 'secunde';\n      },\n      ms: function ms(c) {\n        return c === 1 ? 'milisecundă' : 'milisecunde';\n      },\n      decimal: ','\n    },\n    ru: {\n      y: function y(c) {\n        return ['лет', 'год', 'года'][getSlavicForm(c)];\n      },\n      mo: function mo(c) {\n        return ['месяцев', 'месяц', 'месяца'][getSlavicForm(c)];\n      },\n      w: function w(c) {\n        return ['недель', 'неделя', 'недели'][getSlavicForm(c)];\n      },\n      d: function d(c) {\n        return ['дней', 'день', 'дня'][getSlavicForm(c)];\n      },\n      h: function h(c) {\n        return ['часов', 'час', 'часа'][getSlavicForm(c)];\n      },\n      m: function m(c) {\n        return ['минут', 'минута', 'минуты'][getSlavicForm(c)];\n      },\n      s: function s(c) {\n        return ['секунд', 'секунда', 'секунды'][getSlavicForm(c)];\n      },\n      ms: function ms(c) {\n        return ['миллисекунд', 'миллисекунда', 'миллисекунды'][getSlavicForm(c)];\n      },\n      decimal: ','\n    },\n    uk: {\n      y: function y(c) {\n        return ['років', 'рік', 'роки'][getSlavicForm(c)];\n      },\n      mo: function mo(c) {\n        return ['місяців', 'місяць', 'місяці'][getSlavicForm(c)];\n      },\n      w: function w(c) {\n        return ['тижнів', 'тиждень', 'тижні'][getSlavicForm(c)];\n      },\n      d: function d(c) {\n        return ['днів', 'день', 'дні'][getSlavicForm(c)];\n      },\n      h: function h(c) {\n        return ['годин', 'година', 'години'][getSlavicForm(c)];\n      },\n      m: function m(c) {\n        return ['хвилин', 'хвилина', 'хвилини'][getSlavicForm(c)];\n      },\n      s: function s(c) {\n        return ['секунд', 'секунда', 'секунди'][getSlavicForm(c)];\n      },\n      ms: function ms(c) {\n        return ['мілісекунд', 'мілісекунда', 'мілісекунди'][getSlavicForm(c)];\n      },\n      decimal: ','\n    },\n    ur: {\n      y: 'سال',\n      mo: function mo(c) {\n        return c === 1 ? 'مہینہ' : 'مہینے';\n      },\n      w: function w(c) {\n        return c === 1 ? 'ہفتہ' : 'ہفتے';\n      },\n      d: 'دن',\n      h: function h(c) {\n        return c === 1 ? 'گھنٹہ' : 'گھنٹے';\n      },\n      m: 'منٹ',\n      s: 'سیکنڈ',\n      ms: 'ملی سیکنڈ',\n      decimal: '.'\n    },\n    sk: {\n      y: function y(c) {\n        return ['rok', 'roky', 'roky', 'rokov'][getCzechOrSlovakForm(c)];\n      },\n      mo: function mo(c) {\n        return ['mesiac', 'mesiace', 'mesiace', 'mesiacov'][getCzechOrSlovakForm(c)];\n      },\n      w: function w(c) {\n        return ['týždeň', 'týždne', 'týždne', 'týždňov'][getCzechOrSlovakForm(c)];\n      },\n      d: function d(c) {\n        return ['deň', 'dni', 'dni', 'dní'][getCzechOrSlovakForm(c)];\n      },\n      h: function h(c) {\n        return ['hodina', 'hodiny', 'hodiny', 'hodín'][getCzechOrSlovakForm(c)];\n      },\n      m: function m(c) {\n        return ['minúta', 'minúty', 'minúty', 'minút'][getCzechOrSlovakForm(c)];\n      },\n      s: function s(c) {\n        return ['sekunda', 'sekundy', 'sekundy', 'sekúnd'][getCzechOrSlovakForm(c)];\n      },\n      ms: function ms(c) {\n        return ['milisekunda', 'milisekundy', 'milisekundy', 'milisekúnd'][getCzechOrSlovakForm(c)];\n      },\n      decimal: ','\n    },\n    sv: {\n      y: 'år',\n      mo: function mo(c) {\n        return 'månad' + (c === 1 ? '' : 'er');\n      },\n      w: function w(c) {\n        return 'veck' + (c === 1 ? 'a' : 'or');\n      },\n      d: function d(c) {\n        return 'dag' + (c === 1 ? '' : 'ar');\n      },\n      h: function h(c) {\n        return 'timm' + (c === 1 ? 'e' : 'ar');\n      },\n      m: function m(c) {\n        return 'minut' + (c === 1 ? '' : 'er');\n      },\n      s: function s(c) {\n        return 'sekund' + (c === 1 ? '' : 'er');\n      },\n      ms: function ms(c) {\n        return 'millisekund' + (c === 1 ? '' : 'er');\n      },\n      decimal: ','\n    },\n    tr: {\n      y: 'yıl',\n      mo: 'ay',\n      w: 'hafta',\n      d: 'gün',\n      h: 'saat',\n      m: 'dakika',\n      s: 'saniye',\n      ms: 'milisaniye',\n      decimal: ','\n    },\n    th: {\n      y: 'ปี',\n      mo: 'เดือน',\n      w: 'อาทิตย์',\n      d: 'วัน',\n      h: 'ชั่วโมง',\n      m: 'นาที',\n      s: 'วินาที',\n      ms: 'มิลลิวินาที',\n      decimal: '.'\n    },\n    vi: {\n      y: 'năm',\n      mo: 'tháng',\n      w: 'tuần',\n      d: 'ngày',\n      h: 'giờ',\n      m: 'phút',\n      s: 'giây',\n      ms: 'mili giây',\n      decimal: ','\n    },\n    zh_CN: {\n      y: '年',\n      mo: '个月',\n      w: '周',\n      d: '天',\n      h: '小时',\n      m: '分钟',\n      s: '秒',\n      ms: '毫秒',\n      decimal: '.'\n    },\n    zh_TW: {\n      y: '年',\n      mo: '個月',\n      w: '周',\n      d: '天',\n      h: '小時',\n      m: '分鐘',\n      s: '秒',\n      ms: '毫秒',\n      decimal: '.'\n    }\n  };\n\n  // You can create a humanizer, which returns a function with default\n  // parameters.\n  function humanizer(passedOptions) {\n    var result = function humanizer(ms, humanizerOptions) {\n      var options = extend({}, result, humanizerOptions || {});\n      return doHumanization(ms, options);\n    };\n    return extend(result, {\n      language: 'en',\n      delimiter: ', ',\n      spacer: ' ',\n      conjunction: '',\n      serialComma: true,\n      units: ['y', 'mo', 'w', 'd', 'h', 'm', 's'],\n      languages: {},\n      round: false,\n      unitMeasures: {\n        y: 31557600000,\n        mo: 2629800000,\n        w: 604800000,\n        d: 86400000,\n        h: 3600000,\n        m: 60000,\n        s: 1000,\n        ms: 1\n      }\n    }, passedOptions);\n  }\n\n  // The main function is just a wrapper around a default humanizer.\n  var humanizeDuration = humanizer({});\n\n  // Build dictionary from options\n  function getDictionary(options) {\n    var languagesFromOptions = [options.language];\n    if (has(options, 'fallbacks')) {\n      if (isArray(options.fallbacks) && options.fallbacks.length) {\n        languagesFromOptions = languagesFromOptions.concat(options.fallbacks);\n      } else {\n        throw new Error('fallbacks must be an array with at least one element');\n      }\n    }\n    for (var i = 0; i < languagesFromOptions.length; i++) {\n      var languageToTry = languagesFromOptions[i];\n      if (has(options.languages, languageToTry)) {\n        return options.languages[languageToTry];\n      } else if (has(languages, languageToTry)) {\n        return languages[languageToTry];\n      }\n    }\n    throw new Error('No language found.');\n  }\n\n  // doHumanization does the bulk of the work.\n  function doHumanization(ms, options) {\n    var i, len, piece;\n\n    // Make sure we have a positive number.\n    // Has the nice sideffect of turning Number objects into primitives.\n    ms = Math.abs(ms);\n    var dictionary = getDictionary(options);\n    var pieces = [];\n\n    // Start at the top and keep removing units, bit by bit.\n    var unitName, unitMS, unitCount;\n    for (i = 0, len = options.units.length; i < len; i++) {\n      unitName = options.units[i];\n      unitMS = options.unitMeasures[unitName];\n\n      // What's the number of full units we can fit?\n      if (i + 1 === len) {\n        if (has(options, 'maxDecimalPoints')) {\n          // We need to use this expValue to avoid rounding functionality of toFixed call\n          var expValue = Math.pow(10, options.maxDecimalPoints);\n          var unitCountFloat = ms / unitMS;\n          unitCount = parseFloat((Math.floor(expValue * unitCountFloat) / expValue).toFixed(options.maxDecimalPoints));\n        } else {\n          unitCount = ms / unitMS;\n        }\n      } else {\n        unitCount = Math.floor(ms / unitMS);\n      }\n\n      // Add the string.\n      pieces.push({\n        unitCount: unitCount,\n        unitName: unitName\n      });\n\n      // Remove what we just figured out.\n      ms -= unitCount * unitMS;\n    }\n    var firstOccupiedUnitIndex = 0;\n    for (i = 0; i < pieces.length; i++) {\n      if (pieces[i].unitCount) {\n        firstOccupiedUnitIndex = i;\n        break;\n      }\n    }\n    if (options.round) {\n      var ratioToLargerUnit, previousPiece;\n      for (i = pieces.length - 1; i >= 0; i--) {\n        piece = pieces[i];\n        piece.unitCount = Math.round(piece.unitCount);\n        if (i === 0) {\n          break;\n        }\n        previousPiece = pieces[i - 1];\n        ratioToLargerUnit = options.unitMeasures[previousPiece.unitName] / options.unitMeasures[piece.unitName];\n        if (piece.unitCount % ratioToLargerUnit === 0 || options.largest && options.largest - 1 < i - firstOccupiedUnitIndex) {\n          previousPiece.unitCount += piece.unitCount / ratioToLargerUnit;\n          piece.unitCount = 0;\n        }\n      }\n    }\n    var result = [];\n    for (i = 0, pieces.length; i < len; i++) {\n      piece = pieces[i];\n      if (piece.unitCount) {\n        result.push(render(piece.unitCount, piece.unitName, dictionary, options));\n      }\n      if (result.length === options.largest) {\n        break;\n      }\n    }\n    if (result.length) {\n      if (!options.conjunction || result.length === 1) {\n        return result.join(options.delimiter);\n      } else if (result.length === 2) {\n        return result.join(options.conjunction);\n      } else if (result.length > 2) {\n        return result.slice(0, -1).join(options.delimiter) + (options.serialComma ? ',' : '') + options.conjunction + result.slice(-1);\n      }\n    } else {\n      return render(0, options.units[options.units.length - 1], dictionary, options);\n    }\n  }\n  function render(count, type, dictionary, options) {\n    var decimal;\n    if (has(options, 'decimal')) {\n      decimal = options.decimal;\n    } else if (has(dictionary, 'decimal')) {\n      decimal = dictionary.decimal;\n    } else {\n      decimal = '.';\n    }\n    var countStr = count.toString().replace('.', decimal);\n    var dictionaryValue = dictionary[type];\n    var word;\n    if (typeof dictionaryValue === 'function') {\n      word = dictionaryValue(count);\n    } else {\n      word = dictionaryValue;\n    }\n    return countStr + options.spacer + word;\n  }\n  function extend(destination) {\n    var source;\n    for (var i = 1; i < arguments.length; i++) {\n      source = arguments[i];\n      for (var prop in source) {\n        if (has(source, prop)) {\n          destination[prop] = source[prop];\n        }\n      }\n    }\n    return destination;\n  }\n\n  // Internal helper function for Polish language.\n  function getPolishForm(c) {\n    if (c === 1) {\n      return 0;\n    } else if (Math.floor(c) !== c) {\n      return 1;\n    } else if (c % 10 >= 2 && c % 10 <= 4 && !(c % 100 > 10 && c % 100 < 20)) {\n      return 2;\n    } else {\n      return 3;\n    }\n  }\n\n  // Internal helper function for Russian and Ukranian languages.\n  function getSlavicForm(c) {\n    if (Math.floor(c) !== c) {\n      return 2;\n    } else if (c % 100 >= 5 && c % 100 <= 20 || c % 10 >= 5 && c % 10 <= 9 || c % 10 === 0) {\n      return 0;\n    } else if (c % 10 === 1) {\n      return 1;\n    } else if (c > 1) {\n      return 2;\n    } else {\n      return 0;\n    }\n  }\n\n  // Internal helper function for Slovak language.\n  function getCzechOrSlovakForm(c) {\n    if (c === 1) {\n      return 0;\n    } else if (Math.floor(c) !== c) {\n      return 1;\n    } else if (c % 10 >= 2 && c % 10 <= 4 && c % 100 < 10) {\n      return 2;\n    } else {\n      return 3;\n    }\n  }\n\n  // Internal helper function for Lithuanian language.\n  function getLithuanianForm(c) {\n    if (c === 1 || c % 10 === 1 && c % 100 > 20) {\n      return 0;\n    } else if (Math.floor(c) !== c || c % 10 >= 2 && c % 100 > 20 || c % 10 >= 2 && c % 100 < 10) {\n      return 1;\n    } else {\n      return 2;\n    }\n  }\n\n  // Internal helper function for Latvian language.\n  function getLatvianForm(c) {\n    if (c === 1 || c % 10 === 1 && c % 100 !== 11) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  // Internal helper function for Arabic language.\n  function getArabicForm(c) {\n    if (c <= 2) {\n      return 0;\n    }\n    if (c > 2 && c < 11) {\n      return 1;\n    }\n    return 0;\n  }\n\n  // We need to make sure we support browsers that don't have\n  // `Array.isArray`, so we define a fallback here.\n  var isArray = Array.isArray || function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  };\n  function has(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n  }\n  humanizeDuration.getSupportedLanguages = function getSupportedLanguages() {\n    var result = [];\n    for (var language in languages) {\n      if (has(languages, language) && language !== 'gr') {\n        result.push(language);\n      }\n    }\n    return result;\n  };\n  humanizeDuration.humanizer = humanizer;\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return humanizeDuration;\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = humanizeDuration;\n  } else {\n    this.humanizeDuration = humanizeDuration;\n  }\n})(); // eslint-disable-line semi","map":null,"metadata":{},"sourceType":"script"}