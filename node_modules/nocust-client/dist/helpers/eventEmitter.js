"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var EventEmitter = (function () {
    function EventEmitter() {
        this.listeners = new Map();
    }
    EventEmitter.prototype.on = function (event, callback) {
        var _this = this;
        if (!this.listeners.get(event))
            this.listeners.set(event, []);
        this.listeners.get(event).push(callback);
        return function () {
            var listeners = _this.listeners.get(event);
            if (listeners) {
                _this.listeners.set(event, listeners.filter(function (cb) { return cb !== callback; }));
            }
        };
    };
    EventEmitter.prototype.once = function (event, callback) {
        var unsubscribe = this.on(event, function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            unsubscribe();
            callback.apply(void 0, __spread(args));
        });
        return unsubscribe;
    };
    EventEmitter.prototype.emit = function (event) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var listeners = this.listeners.get(event);
        if (listeners)
            listeners.forEach(function (f) { return f.apply(void 0, __spread(args)); });
    };
    EventEmitter.prototype.removeEventAllListeners = function () {
        this.listeners = new Map();
    };
    return EventEmitter;
}());
exports.EventEmitter = EventEmitter;
//# sourceMappingURL=eventEmitter.js.map