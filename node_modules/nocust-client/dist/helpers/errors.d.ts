export declare enum NCErrorCode {
    UNKNOWN_ERROR = "UNKNOWN_ERROR",
    INITIALIZATION_FAILED = "INITIALIZATION_FAILED",
    WALLET_UNREGISTERED = "WALLET_UNREGISTERED",
    RECIPIENT_UNREGISTERED = "RECIPIENT_UNREGISTERED",
    WALLET_ALREADY_REGISTERED = "WALLET_ALREADY_REGISTERED",
    CAN_NOT_RECOVER_FUNDS = "CAN_NOT_RECOVER_FUNDS",
    NO_PRIVATE_KEY = "NO_PRIVATE_KEY",
    SLA_NOT_EXPIRED_YET = "SLA_NOT_EXPIRED_YET",
    PREPARE_TRANSFER_FAILURE = "PREPARE_TRANSFER_FAILURE",
    POST_FAILURE = "POST_FAILURE",
    REGISTRATION_THROTTLING = "REGISTRATION_THROTTLING",
    FETCH_OPERATOR_DATA_ERROR = "FETCH_OPERATOR_DATA_ERROR",
    FETCH_PARENT_CHAIN_DATA_ERROR = "FETCH_PARENT_CHAIN_DATA_ERROR",
    CONFIRMATION_TIMEOUT = "CONFIRMATION_TIMEOUT",
    NON_UNIQUE_TRANSFER = "NON_UNIQUE_TRANSFER",
    TX_HASH_NOT_FOUND = "TX_HASH_NOT_FOUND",
    PARENT_CHAIN_TRANSACTION_FAILURE = "PARENT_CHAIN_TRANSACTION_FAILURE",
    INSUFFICIENT_WITHDRAWAL_LIMIT = "INSUFFICIENT_WITHDRAWAL_LIMIT",
    NO_ETHER_TO_PAY_FOR_GAS = "NO_ETHER_TO_PAY_FOR_GAS",
    SUB_ACCOUNT_INDEX_NOT_FOUND = "SUB_ACCOUNT_INDEX_NOT_FOUND",
    SWAP_LIMIT_REACHED_ERROR = "SWAP_LIMIT_REACHED_ERROR",
    INSUFFICIENT_COMMIT_CHAIN_BALANCE = "INSUFFICIENT_COMMIT_CHAIN_BALANCE",
    INSUFFICIENT_PARENT_CHAIN_BALANCE = "INSUFFICIENT_PARENT_CHAIN_BALANCE",
    INSUFFICIENT_TRANSFER_ALLOWANCE = "INSUFFICIENT_TRANSFER_ALLOWANCE",
    SWAP_PENDING = "SWAP_PENDING",
    TRANSFER_NOT_FOUND = "TRANSFER_NOT_FOUND",
    TRANSFER_TO_SELF = "TRANSFER_TO_SELF",
    NO_TRADING_SETUP = "NO_TRADING_SETUP",
    CAN_NOT_CANCEL_SWAP = "CAN_NOT_CANCEL_SWAP",
    CAN_NOT_ISSUE_STATE_UPDATE_CHALLENGE = "CAN_NOT_ISSUE_STATE_UPDATE_CHALLENGE",
    CAN_NOT_ISSUE_DELIVERY_CHALLENGE = "CAN_NOT_ISSUE_DELIVERY_CHALLENGE"
}
export declare enum NCServerErrorCode {
    UNKNOWN_ERROR = "UNKNOWN_ERROR",
    EON_NUMBER_OUT_OF_SYNC = "EON_NUMBER_OUT_OF_SYNC",
    NOT_FOUND = "NOT_FOUND",
    INTERNAL_ERROR = "INTERNAL_ERROR",
    NON_UNIQUE = "unique"
}
export declare class NCError extends Error {
    description?: string;
    data?: Object;
    constructor(code: NCErrorCode, description?: string, data?: Object);
}
export declare class NCServerError extends Error {
    description?: string;
    data?: Object;
    constructor(code: NCServerErrorCode, description?: string, data?: Object);
}
