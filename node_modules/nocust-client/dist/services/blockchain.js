"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var web3_1 = __importDefault(require("web3"));
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var nocustAbi_1 = require("../helpers/nocustAbi");
var erc20Abi_1 = require("../helpers/erc20Abi");
var signature_1 = require("../wallet/signature");
var store_1 = require("../store");
var nocustContract;
var erc20Contracts = new Map();
function init(rpcUrl, contractAddress) {
    exports.web3 = new web3_1.default(new web3_1.default.providers.HttpProvider(rpcUrl));
    nocustContract = new exports.web3.eth.Contract(nocustAbi_1.NOCUST_ABI, contractAddress);
}
var addedAccounts = [];
function addPrivateKey(privateKey) {
    var wallet = exports.web3.eth.accounts.wallet.add(privateKey);
    addedAccounts.push(wallet.address.toLowerCase());
    return wallet.address;
}
var isPrivateKeyAdded = function (address) { return addedAccounts.includes(address.toLowerCase()); };
var getBlockNumber = function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
    return [2, exports.web3.eth.getBlockNumber()];
}); }); };
function getETHBalance(address) {
    return __awaiter(this, void 0, void 0, function () {
        var balance, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, exports.web3.eth.getBalance(address)];
                case 1:
                    balance = _a.sent();
                    return [2, new bignumber_js_1.default(balance)];
                case 2:
                    e_1 = _a.sent();
                    return [2, Promise.reject(e_1)];
                case 3: return [2];
            }
        });
    });
}
function getERC20Balance(address, token) {
    return __awaiter(this, void 0, void 0, function () {
        var contract, balance, e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    contract = getErc20Contract(token);
                    return [4, contract.methods.balanceOf(address).call()];
                case 1:
                    balance = _a.sent();
                    return [2, new bignumber_js_1.default(balance)];
                case 2:
                    e_2 = _a.sent();
                    return [2, Promise.reject(e_2)];
                case 3: return [2];
            }
        });
    });
}
var callNocustMethod = function (name, params) { return __awaiter(void 0, void 0, void 0, function () {
    var _a;
    return __generator(this, function (_b) {
        return [2, (_a = nocustContract.methods)[name].apply(_a, __spread((params || []))).call()];
    });
}); };
var estimateGasOfNocustMethod = function (name, from, value, params) { return __awaiter(void 0, void 0, void 0, function () {
    var _a;
    return __generator(this, function (_b) {
        return [2, (_a = nocustContract.methods)[name].apply(_a, __spread((params || []))).estimateGas({ from: from, value: value })];
    });
}); };
function sendNocustMethod(config) {
    return __awaiter(this, void 0, void 0, function () {
        var address, gasPrice, gasLimit, name, amount, _a, params, nonce, data;
        var _b;
        return __generator(this, function (_c) {
            address = config.address, gasPrice = config.gasPrice, gasLimit = config.gasLimit, name = config.name, amount = config.amount, _a = config.params, params = _a === void 0 ? [] : _a, nonce = config.nonce;
            data = {
                from: address,
                gasPrice: gasPrice,
                gas: gasLimit,
            };
            if (nonce) {
                data.nonce = nonce;
            }
            if (amount) {
                data.value = amount;
            }
            return [2, (_b = nocustContract.methods)[name].apply(_b, __spread(params)).send(data)];
        });
    });
}
var callERC20Method = function (token, name, params) { return __awaiter(void 0, void 0, void 0, function () {
    var _a;
    return __generator(this, function (_b) {
        return [2, (_a = getErc20Contract(token)
                .methods)[name].apply(_a, __spread((params || []))).call()];
    });
}); };
function sendERC20Method(config) {
    return __awaiter(this, void 0, void 0, function () {
        var address, gasPrice, gasLimit, token, name, _a, params;
        var _b;
        return __generator(this, function (_c) {
            address = config.address, gasPrice = config.gasPrice, gasLimit = config.gasLimit, token = config.token, name = config.name, _a = config.params, params = _a === void 0 ? [] : _a;
            return [2, (_b = getErc20Contract(token)
                    .methods)[name].apply(_b, __spread(params)).send({ from: address, gasPrice: gasPrice, gas: gasLimit })];
        });
    });
}
function getErc20Contract(token) {
    var contract = erc20Contracts.get(token);
    if (!contract) {
        contract = new exports.web3.eth.Contract(erc20Abi_1.ERC20_ABI, token);
        erc20Contracts.set(token, contract);
    }
    return contract;
}
function sign(address, hash) {
    return __awaiter(this, void 0, void 0, function () {
        var signature;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    hash = preprocessNocustSign(hash);
                    return [4, exports.web3.eth.sign(hash, address)];
                case 1:
                    signature = _a.sent();
                    return [2, signature_1.createSignature(address, hash, signature)];
            }
        });
    });
}
var validateSignature = function (hash, signature, address) {
    return exports.web3.eth.accounts.recover(preprocessNocustSign(hash), '0x' + signature) === address;
};
var preprocessNocustSign = function (data) {
    return web3_1.default.utils.soliditySha3('\x19Liquidity.Network Authorization:\n32', data);
};
var sendEther = function (_a) {
    var from = _a.from, to = _a.to, amount = _a.amount, gasPrice = _a.gasPrice;
    return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_b) {
        return [2, exports.web3.eth.sendTransaction({ from: from, to: to, gas: 200000, gasPrice: gasPrice, value: amount })];
    }); });
};
var sendERC20 = function (_a) {
    var from = _a.from, to = _a.to, token = _a.token, amount = _a.amount, gasPrice = _a.gasPrice;
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_b) {
            return [2, sendERC20Method({
                    name: 'transfer',
                    address: from,
                    gasPrice: gasPrice,
                    gasLimit: 200000,
                    token: token,
                    params: [to, amount],
                })];
        });
    });
};
var fetchNetworkId = function () { return __awaiter(void 0, void 0, void 0, function () {
    var _a, e_3;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _b.trys.push([0, 2, , 3]);
                _a = store_1.store;
                return [4, exports.web3.eth.net.getId()];
            case 1:
                _a.networkId = _b.sent();
                return [3, 3];
            case 2:
                e_3 = _b.sent();
                return [2, Promise.reject(e_3)];
            case 3: return [2];
        }
    });
}); };
var fetchEVMRevertMessage = function (txId) { return __awaiter(void 0, void 0, void 0, function () {
    var revertId, tx, txResult;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                revertId = '0x08c379a0';
                return [4, exports.web3.eth.getTransaction(txId)];
            case 1:
                tx = _a.sent();
                console.log('tx', tx);
                if (!tx)
                    throw new Error('[EVM REVERT] The transaction does not exist');
                return [4, exports.web3.eth.call({
                        from: tx.from,
                        to: tx.to,
                        data: tx.input,
                        gas: tx.gas,
                        gasPrice: tx.gasPrice,
                        value: tx.value,
                        nonce: tx.nonce,
                    }, tx.blockNumber)];
            case 2:
                txResult = _a.sent();
                console.log('txResult', txResult);
                if (txResult.search(revertId) === -1) {
                    throw new Error('[EVM REVERT] The transaction did not revert');
                }
                return [2, exports.web3.utils.hexToAscii('0x' + txResult.slice(revertId.length))];
        }
    });
}); };
exports.blockchain = {
    addPrivateKey: addPrivateKey,
    callERC20Method: callERC20Method,
    callNocustMethod: callNocustMethod,
    fetchEVMRevertMessage: fetchEVMRevertMessage,
    getBlockNumber: getBlockNumber,
    getETHBalance: getETHBalance,
    getERC20Balance: getERC20Balance,
    fetchNetworkId: fetchNetworkId,
    init: init,
    isPrivateKeyAdded: isPrivateKeyAdded,
    sendERC20Method: sendERC20Method,
    sendNocustMethod: sendNocustMethod,
    sendEther: sendEther,
    sendERC20: sendERC20,
    sign: sign,
    validateSignature: validateSignature,
    estimateGasOfNocustMethod: estimateGasOfNocustMethod,
};
//# sourceMappingURL=blockchain.js.map