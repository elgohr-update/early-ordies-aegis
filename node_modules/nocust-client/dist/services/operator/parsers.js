"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = __importDefault(require("bignumber.js"));
exports.parseSLAInfo = function (data) { return ({
    token: data.token,
    price: new bignumber_js_1.default(data.cost),
    recipient: data.recipient,
    monthlyLimit: data.limit,
}); };
exports.parseTokenInfo = function (data) {
    return data.map(function (t) { return ({
        address: t.address,
        name: t.name,
        shortName: t.short_name,
    }); });
};
exports.parseRegistration = function (data) { return ({
    eon: data.eon_number,
    walletSignature: data.authorization,
    operatorSignature: data.operator_authorization,
    trailIdentifier: data.trail_identifier,
}); };
exports.parseActiveState = function (data) { return ({
    walletSignature: data.wallet_signature,
    operatorSignature: data.operator_signature,
    updatedSpendings: data.updated_spendings,
    updatedGains: data.updated_gains,
    txSetHash: data.tx_set_hash,
}); };
exports.parseMerkleProof = function (data) { return ({
    eon: data.eon_number,
    left: data.left,
    right: data.right,
    allotmentChain: data.allotment_chain,
    membershipChain: data.membership_chain,
    values: data.values,
    trail: data.trail,
    activeStateHash: data.active_state_checksum,
    activeState: data.active_state ? exports.parseActiveState(data.active_state) : data.active_state,
    passiveHash: data.passive_checksum,
    passiveAmount: data.passive_amount,
    passiveMarker: data.passive_marker,
}); };
exports.parseDeliveryProof = function (data) { return ({
    merkleProof: data.merkle_proof ? exports.parseMerkleProof(data.merkle_proof) : data.merkle_proof,
    transferMembershipChain: data.transfer_membership_chain,
    transferMembershipTrail: data.transfer_membership_trail,
    transferMembershipValues: data.transfer_membership_values,
}); };
exports.parseMatchedAmounts = function (data) { return ({
    matchedIn: data.matched_in,
    matchedOut: data.matched_out,
}); };
exports.parseTransaction = function (data) { return ({
    id: data.id,
    txId: data.tx_id,
    amount: new bignumber_js_1.default(data.amount),
    amountSwapped: data.amount_swapped ? new bignumber_js_1.default(data.amount_swapped) : data.amount_swapped,
    wallet: {
        address: data.wallet.address,
        token: data.wallet.token,
        trailIdentifier: data.wallet.trail_identifier,
    },
    recipient: {
        address: data.recipient.address,
        token: data.recipient.token,
        trailIdentifier: data.recipient.trail_identifier,
    },
    nonce: data.nonce,
    passiveMarker: data.position,
    senderActiveState: data.sender_active_state
        ? exports.parseActiveState(data.sender_active_state)
        : data.sender_active_state,
    recipientActiveState: data.recipient_active_state
        ? exports.parseActiveState(data.recipient_active_state)
        : data.recipient_active_state,
    recipientFulfillmentActiveState: data.recipient_fulfillment_active_state
        ? exports.parseActiveState(data.recipient_fulfillment_active_state)
        : data.recipient_fulfillment_active_state,
    recipientFinalizationActiveState: data.recipient_finalization_active_state
        ? exports.parseActiveState(data.recipient_finalization_active_state)
        : data.recipient_finalization_active_state,
    swapFreezingSignature: data.swap_freezing_signature,
    senderCancellationActiveState: data.sender_cancellation_active_state
        ? exports.parseActiveState(data.sender_cancellation_active_state)
        : data.sender_cancellation_active_state,
    senderFinalizationActiveState: data.sender_finalization_active_state
        ? exports.parseActiveState(data.sender_finalization_active_state)
        : data.sender_finalization_active_state,
    recipientCancellationActiveState: data.recipient_cancellation_active_state
        ? exports.parseActiveState(data.recipient_cancellation_active_state)
        : data.recipient_cancellation_active_state,
    senderStartingBalance: data.sender_starting_balance,
    recipientStartingBalance: data.recipient_starting_balance,
    deliveryProof: data.delivery_proof
        ? exports.parseDeliveryProof(data.delivery_proof)
        : data.delivery_proof,
    eon: data.eon_number,
    processed: data.processed,
    complete: data.complete,
    voided: data.voided,
    cancelled: data.cancelled,
    appended: data.appended,
    matchedAmounts: data.matched_amounts
        ? exports.parseMatchedAmounts(data.matched_amounts)
        : data.matched_amounts,
    time: data.time,
    swap: data.swap,
}); };
exports.parseWalletState = function (data) { return ({
    registration: exports.parseRegistration(data.registration),
    merkleProof: data.merkle_proof ? exports.parseMerkleProof(data.merkle_proof) : data.merkle_proof,
    transactions: data.transactions.map(exports.parseTransaction),
    deposits: data.deposits.map(exports.parseDeposit),
    withdrawalRequests: data.withdrawal_requests,
    withdrawals: data.withdrawals,
}); };
exports.parseBlockEon = function (data) { return ({
    block: data.block,
    eon: data.eon_number,
}); };
exports.parseOperatorStatus = function (data) { return ({
    latest: exports.parseBlockEon(data.latest),
    confirmed: exports.parseBlockEon(data.confirmed),
}); };
exports.parseDeposit = function (data) { return ({
    txId: data.txid,
    block: data.block,
    eon: data.eon_number,
    amount: data.amount,
    time: data.time,
}); };
exports.parseToSConfig = function (data) { return ({
    privacyPolicyDigest: data.privacy_policy_digest,
    termsOfServiceDigest: data.terms_of_service_digest,
    time: data.time,
}); };
exports.parseSwapFreeze = function (data) { return ({
    id: data.id,
    txId: data.tx_id,
    matchedAmounts: exports.parseMatchedAmounts(data.matched_amounts),
}); };
exports.parseSwapCancellation = function (data) { return ({
    id: data.id,
    txId: data.tx_id,
    senderCancellationActiveState: exports.parseActiveState(data.sender_cancellation_active_state),
    recipientCancellationActiveState: exports.parseActiveState(data.recipient_cancellation_active_state),
}); };
exports.parseSwapFinalization = function (data) { return ({
    id: data.id,
    txId: data.tx_id,
    recipientFinalizationActiveState: exports.parseActiveState(data.recipient_finalization_active_state),
}); };
exports.parseOrder = function (data) { return ({
    amount: new bignumber_js_1.default(data.amount),
    amountSwapped: new bignumber_js_1.default(data.amount_swapped),
    remainingIn: new bignumber_js_1.default(data.remaining_in),
    remainingOut: new bignumber_js_1.default(data.remaining_out),
}); };
exports.parseOrderBook = function (data) { return ({
    buyOrders: data.buy_orders.map(exports.parseOrder),
    sellOrders: data.sell_orders.map(exports.parseOrder),
}); };
//# sourceMappingURL=parsers.js.map