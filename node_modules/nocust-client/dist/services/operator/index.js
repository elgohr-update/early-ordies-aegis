"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var request_1 = require("./request");
var store_1 = require("../../store");
var parsers_1 = require("./parsers");
var utils_1 = require("../../helpers/utils");
var errors_1 = require("../../helpers/errors");
var signature_1 = require("../../wallet/signature");
var validators_1 = require("./validators");
exports.operator = {
    getSLAInfo: getSLAInfo,
    getSLAStatus: getSLAStatus,
    getStatus: getStatus,
    getTokensList: getTokensList,
    getTransfer: getTransfer,
    getTransfers: getTransfers,
    fetchWalletState: fetchWalletState,
    getWalletRegistration: getWalletRegistration,
    registerWallet: registerWallet,
    sendTransfer: sendTransfer,
    postSLA: postSLA,
    getToSDigests: getToSDigests,
    postToSSignature: postToSSignature,
    registerBulkWallets: registerBulkWallets,
    sendSwapOrder: sendSwapOrder,
    sendSwapFreezing: sendSwapFreezing,
    sendSwapCancellation: sendSwapCancellation,
    sendSwapFinalization: sendSwapFinalization,
    getOrderbook: getOrderbook,
};
function getStatus() {
    return __awaiter(this, void 0, void 0, function () {
        var data, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, request_1.request('audit', 'get')];
                case 1:
                    data = _a.sent();
                    return [2, parsers_1.parseOperatorStatus(data)];
                case 2:
                    e_1 = _a.sent();
                    return [2, Promise.reject(e_1)];
                case 3: return [2];
            }
        });
    });
}
function getSLAInfo() {
    return __awaiter(this, void 0, void 0, function () {
        var data, e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    if (store_1.store.slaInfo)
                        return [2, store_1.store.slaInfo];
                    return [4, request_1.request('sla', 'get')];
                case 1:
                    data = _a.sent();
                    if (validators_1.payloadValidators.isValidating)
                        validators_1.payloadValidators.validateSLAInfo(data);
                    store_1.store.slaInfo = parsers_1.parseSLAInfo(data);
                    return [2, store_1.store.slaInfo];
                case 2:
                    e_2 = _a.sent();
                    return [2, Promise.reject(e_2)];
                case 3: return [2];
            }
        });
    });
}
function getTokensList() {
    return __awaiter(this, void 0, void 0, function () {
        var data, e_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, request_1.request('audit/tokens/', 'get')];
                case 1:
                    data = _a.sent();
                    if (validators_1.payloadValidators.isValidating)
                        validators_1.payloadValidators.validateTokensList(data);
                    return [2, parsers_1.parseTokenInfo(data)];
                case 2:
                    e_3 = _a.sent();
                    return [2, Promise.reject(e_3)];
                case 3: return [2];
            }
        });
    });
}
function fetchWalletState(config) {
    return __awaiter(this, void 0, void 0, function () {
        var token, address, eon, data, e_4;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    token = config.token, address = config.address, eon = config.eon;
                    return [4, request_1.request('audit/' + eon + '/' + token + '/' + address + '/', 'get')];
                case 1:
                    data = _a.sent();
                    if (validators_1.payloadValidators.isValidating)
                        validators_1.payloadValidators.validateWalletState(data);
                    return [2, parsers_1.parseWalletState(data)];
                case 2:
                    e_4 = _a.sent();
                    return [2, Promise.reject(e_4)];
                case 3: return [2];
            }
        });
    });
}
function getWalletRegistration(address, token) {
    return __awaiter(this, void 0, void 0, function () {
        var data, e_5;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, request_1.request('audit/' + token + '/' + address + '/whois', 'get')];
                case 1:
                    data = _a.sent();
                    if (validators_1.payloadValidators.isValidating)
                        validators_1.payloadValidators.validateWalletRegistration(data);
                    return [2, parsers_1.parseRegistration(data)];
                case 2:
                    e_5 = _a.sent();
                    return [2, Promise.reject(e_5)];
                case 3: return [2];
            }
        });
    });
}
function getTransfer(id) {
    return __awaiter(this, void 0, void 0, function () {
        var data, e_6;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, request_1.request('audit/transactions/' + id, 'get')];
                case 1:
                    data = _a.sent();
                    if (validators_1.payloadValidators.isValidating)
                        validators_1.payloadValidators.validateTransaction(data);
                    return [2, parsers_1.parseTransaction(data)];
                case 2:
                    e_6 = _a.sent();
                    return [2, Promise.reject(e_6)];
                case 3: return [2];
            }
        });
    });
}
function getTransfers(params) {
    return __awaiter(this, void 0, void 0, function () {
        var paramsTransformed, data, e_7;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    paramsTransformed = __assign(__assign({}, params), { tx_id: params.txId, eon_number: params.eon });
                    return [4, request_1.request('audit/transactions', 'get', undefined, paramsTransformed)];
                case 1:
                    data = _a.sent();
                    return [2, data.results.map(function (t) { return parsers_1.parseTransaction(t); })];
                case 2:
                    e_7 = _a.sent();
                    return [2, Promise.reject(e_7)];
                case 3: return [2];
            }
        });
    });
}
function getSLAStatus(address) {
    return __awaiter(this, void 0, void 0, function () {
        var data, e_8;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, request_1.request('sla/' + address, 'get')];
                case 1:
                    data = _a.sent();
                    if (validators_1.payloadValidators.isValidating)
                        validators_1.payloadValidators.validateSLA(data);
                    return [2, data.expiry];
                case 2:
                    e_8 = _a.sent();
                    return [2, Promise.reject(e_8)];
                case 3: return [2];
            }
        });
    });
}
function registerWallet(wallet, authSignature, tosSignature) {
    try {
        return request_1.request('admission/', 'post', {
            authorization: { value: signature_1.signatureToRSV(authSignature) },
            address: utils_1.remove0x(wallet.address),
            token: utils_1.remove0x(wallet.token),
            tos_signature: { value: signature_1.signatureToRSV(tosSignature) },
        });
    }
    catch (e) {
        if (e.message === errors_1.NCServerErrorCode.NON_UNIQUE) {
            return Promise.reject(new errors_1.NCError(errors_1.NCErrorCode.WALLET_ALREADY_REGISTERED, undefined, e));
        }
        else
            return Promise.reject(e);
    }
}
function registerBulkWallets(walletsConfig) {
    try {
        return request_1.request('admission/bulk/', 'post', {
            admissions: walletsConfig.map(function (config) { return ({
                authorization: { value: signature_1.signatureToRSV(config.authSignature) },
                address: utils_1.remove0x(config.wallet.address),
                token: utils_1.remove0x(config.wallet.token),
                tos_signature: { value: signature_1.signatureToRSV(config.tosSignature) },
            }); }),
        });
    }
    catch (e) {
        return Promise.reject(e);
    }
}
function sendTransfer(config) {
    return __awaiter(this, void 0, void 0, function () {
        var data, e_9;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, request_1.request('transfer/', 'post', {
                            wallet: {
                                address: utils_1.remove0x(config.senderAddress),
                                token: utils_1.remove0x(config.tokenAddress),
                            },
                            amount: config.amount,
                            nonce: config.nonce,
                            eon_number: config.eon,
                            recipient: {
                                address: utils_1.remove0x(config.recipientAddress),
                                token: utils_1.remove0x(config.tokenAddress),
                            },
                            debit_balance: config.balanceMarker.balance,
                            debit_signature: { value: signature_1.signatureToRSV(config.activeStateSignature) },
                            debit_balance_signature: { value: signature_1.signatureToRSV(config.balanceMarkerSignature) },
                        })];
                case 1:
                    data = _a.sent();
                    if (validators_1.payloadValidators.isValidating)
                        validators_1.payloadValidators.validateTransaction(data);
                    return [2, parsers_1.parseTransaction(data)];
                case 2:
                    e_9 = _a.sent();
                    return [2, Promise.reject(e_9)];
                case 3: return [2];
            }
        });
    });
}
function postSLA(address, transferId) {
    return __awaiter(this, void 0, void 0, function () {
        var e_10;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, request_1.request('sla/' + address, 'post', { transfer_id: transferId })];
                case 1:
                    _a.sent();
                    return [3, 3];
                case 2:
                    e_10 = _a.sent();
                    return [2, Promise.reject(e_10)];
                case 3: return [2];
            }
        });
    });
}
function getToSDigests() {
    return __awaiter(this, void 0, void 0, function () {
        var data, e_11;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, request_1.request('tos/latest', 'get')];
                case 1:
                    data = _a.sent();
                    return [2, parsers_1.parseToSConfig(data)];
                case 2:
                    e_11 = _a.sent();
                    return [2, Promise.reject(e_11)];
                case 3: return [2];
            }
        });
    });
}
function postToSSignature(address, tosSignature) {
    return __awaiter(this, void 0, void 0, function () {
        var e_12;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, request_1.request('tos/', 'post', {
                            address: address,
                            tos_signature: signature_1.signatureToRSV(tosSignature),
                        })];
                case 1:
                    _a.sent();
                    return [3, 3];
                case 2:
                    e_12 = _a.sent();
                    return [2, Promise.reject(e_12)];
                case 3: return [2];
            }
        });
    });
}
function sendSwapOrder(config) {
    return __awaiter(this, void 0, void 0, function () {
        var data, e_13;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, request_1.request('swap/', 'post', {
                            debit_signature: config.debitActiveStateSignatures.map(function (signature) { return ({
                                value: signature_1.signatureToRSV(signature),
                            }); }),
                            credit_signature: config.creditActiveStateSignatures.map(function (signature) { return ({
                                value: signature_1.signatureToRSV(signature),
                            }); }),
                            credit_balance_signature: config.creditBalanceSignatures.map(function (signature) { return ({
                                value: signature_1.signatureToRSV(signature),
                            }); }),
                            debit_balance_signature: config.debitBalanceSignatures.map(function (signature) { return ({
                                value: signature_1.signatureToRSV(signature),
                            }); }),
                            credit_fulfillment_signature: config.fulfillmentActiveStateSignatures.map(function (signature) { return ({
                                value: signature_1.signatureToRSV(signature),
                            }); }),
                            eon_number: config.eon,
                            amount: config.amount,
                            amount_swapped: config.amountSwapped,
                            nonce: config.nonce,
                            wallet: {
                                address: utils_1.remove0x(config.debitWallet.address),
                                token: utils_1.remove0x(config.debitWallet.token),
                            },
                            recipient: {
                                address: utils_1.remove0x(config.creditWallet.address),
                                token: utils_1.remove0x(config.creditWallet.token),
                            },
                        })];
                case 1:
                    data = _a.sent();
                    if (validators_1.payloadValidators.isValidating)
                        validators_1.payloadValidators.validateTransaction(data);
                    return [2, parsers_1.parseTransaction(data)];
                case 2:
                    e_13 = _a.sent();
                    return [2, Promise.reject(e_13)];
                case 3: return [2];
            }
        });
    });
}
function sendSwapFreezing(swapId, freezingSignature) {
    return __awaiter(this, void 0, void 0, function () {
        var data, e_14;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, request_1.request("swap/" + swapId + "/freeze", 'put', {
                            freezing_signature: {
                                value: signature_1.signatureToRSV(freezingSignature),
                            },
                        })];
                case 1:
                    data = _a.sent();
                    if (validators_1.payloadValidators.isValidating)
                        validators_1.payloadValidators.validateSwapFreeze(data);
                    return [2, parsers_1.parseSwapFreeze(data)];
                case 2:
                    e_14 = _a.sent();
                    return [2, Promise.reject(e_14)];
                case 3: return [2];
            }
        });
    });
}
function sendSwapCancellation(swapId, creditCancellationSignatures, debitCancellationSignatures) {
    return __awaiter(this, void 0, void 0, function () {
        var data, e_15;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, request_1.request("swap/" + swapId + "/cancel", 'put', {
                            sender_cancellation_signature: debitCancellationSignatures.map(function (signature) { return ({
                                value: signature_1.signatureToRSV(signature),
                            }); }),
                            recipient_cancellation_signature: creditCancellationSignatures.map(function (signature) { return ({
                                value: signature_1.signatureToRSV(signature),
                            }); }),
                        })];
                case 1:
                    data = _a.sent();
                    if (validators_1.payloadValidators.isValidating)
                        validators_1.payloadValidators.validateSwapCancellation(data);
                    return [2, parsers_1.parseSwapCancellation(data)];
                case 2:
                    e_15 = _a.sent();
                    return [2, Promise.reject(e_15)];
                case 3: return [2];
            }
        });
    });
}
function sendSwapFinalization(swapId, finalizationSignatures) {
    return __awaiter(this, void 0, void 0, function () {
        var data, e_16;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, request_1.request("swap/" + swapId + "/finalize", 'put', {
                            finalization_signature: finalizationSignatures.map(function (signature) { return ({
                                value: signature_1.signatureToRSV(signature),
                            }); }),
                        })];
                case 1:
                    data = _a.sent();
                    if (validators_1.payloadValidators.isValidating)
                        validators_1.payloadValidators.validateSwapFinalization(data);
                    return [2, parsers_1.parseSwapFinalization(data)];
                case 2:
                    e_16 = _a.sent();
                    return [2, Promise.reject(e_16)];
                case 3: return [2];
            }
        });
    });
}
function getOrderbook(baseTokenAddress, quoteTokenAddress) {
    return __awaiter(this, void 0, void 0, function () {
        var data, e_17;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, request_1.request("audit/" + baseTokenAddress + "/" + quoteTokenAddress + "/orderbook", 'get')];
                case 1:
                    data = _a.sent();
                    if (validators_1.payloadValidators.isValidating)
                        validators_1.payloadValidators.validateOrderBook(data);
                    return [2, parsers_1.parseOrderBook(data)];
                case 2:
                    e_17 = _a.sent();
                    return [2, Promise.reject(e_17)];
                case 3: return [2];
            }
        });
    });
}
//# sourceMappingURL=index.js.map