import { TokenInfo } from '../../nocust/getSupportedTokens';
import { SLAInfo } from '../../nocust/getSLAInfo';
import { OperatorStatusPayload, RegistrationPayload, WalletStatePayload, TransactionPayload, ToSConfigPayload, SwapFreezePayload, SwapCancellationPayload, SwapFinalizationPayload, OrderBookPayload } from './payloads';
import { Signature } from '../../wallet/signature';
import { BalanceMarker } from '../../wallet/balanceMarker';
import { Wallet } from '../../wallet';
import BigNumber from 'bignumber.js';
export declare const operator: {
    getSLAInfo: typeof getSLAInfo;
    getSLAStatus: typeof getSLAStatus;
    getStatus: typeof getStatus;
    getTokensList: typeof getTokensList;
    getTransfer: typeof getTransfer;
    getTransfers: typeof getTransfers;
    fetchWalletState: typeof fetchWalletState;
    getWalletRegistration: typeof getWalletRegistration;
    registerWallet: typeof registerWallet;
    sendTransfer: typeof sendTransfer;
    postSLA: typeof postSLA;
    getToSDigests: typeof getToSDigests;
    postToSSignature: typeof postToSSignature;
    registerBulkWallets: typeof registerBulkWallets;
    sendSwapOrder: typeof sendSwapOrder;
    sendSwapFreezing: typeof sendSwapFreezing;
    sendSwapCancellation: typeof sendSwapCancellation;
    sendSwapFinalization: typeof sendSwapFinalization;
    getOrderbook: typeof getOrderbook;
};
declare function getStatus(): Promise<OperatorStatusPayload>;
declare function getSLAInfo(): Promise<SLAInfo>;
declare function getTokensList(): Promise<TokenInfo[]>;
declare type FetchWalletStateConfig = {
    address: string;
    token: string;
    eon: number;
};
declare function fetchWalletState(config: FetchWalletStateConfig): Promise<WalletStatePayload>;
declare function getWalletRegistration(address: string, token: string): Promise<RegistrationPayload>;
declare function getTransfer(id: number): Promise<TransactionPayload>;
export declare type TransactionsParams = {
    offset?: number;
    limit?: number;
    txId?: string;
    eon?: number;
    nonce?: number;
    search?: string;
    passive?: boolean;
    complete?: boolean;
    swap?: boolean;
    cancelled?: boolean;
    voided?: boolean;
    ordering?: string;
};
declare function getTransfers(params: TransactionsParams): Promise<TransactionPayload[]>;
declare function getSLAStatus(address: string): Promise<number>;
declare function registerWallet(wallet: Wallet, authSignature: Signature, tosSignature: Signature): Promise<any>;
export declare type RegisterationConfig = {
    wallet: Wallet;
    authSignature: Signature;
    tosSignature: Signature;
};
declare function registerBulkWallets(walletsConfig: RegisterationConfig[]): Promise<any>;
declare type SendTransferConfig = {
    activeStateSignature: Signature;
    balanceMarkerSignature: Signature;
    nonce: BigNumber;
    senderAddress: string;
    recipientAddress: string;
    tokenAddress: string;
    eon: number;
    amount: BigNumber;
    balanceMarker: BalanceMarker;
};
declare function sendTransfer(config: SendTransferConfig): Promise<TransactionPayload>;
declare function postSLA(address: string, transferId: number): Promise<never>;
declare function getToSDigests(): Promise<ToSConfigPayload>;
declare function postToSSignature(address: string, tosSignature: Signature): Promise<never>;
declare type SendSwapOrderConfig = {
    creditWallet: Wallet;
    debitWallet: Wallet;
    creditActiveStateSignatures: Array<Signature>;
    debitActiveStateSignatures: Array<Signature>;
    fulfillmentActiveStateSignatures: Array<Signature>;
    creditBalanceSignatures: Array<Signature>;
    debitBalanceSignatures: Array<Signature>;
    eon: number;
    amount: BigNumber;
    amountSwapped: BigNumber;
    nonce: BigNumber;
};
declare function sendSwapOrder(config: SendSwapOrderConfig): Promise<TransactionPayload>;
declare function sendSwapFreezing(swapId: number, freezingSignature: Signature): Promise<SwapFreezePayload>;
declare function sendSwapCancellation(swapId: number, creditCancellationSignatures: Array<Signature>, debitCancellationSignatures: Array<Signature>): Promise<SwapCancellationPayload>;
declare function sendSwapFinalization(swapId: number, finalizationSignatures: Array<Signature>): Promise<SwapFinalizationPayload>;
declare function getOrderbook(baseTokenAddress: string, quoteTokenAddress: string): Promise<OrderBookPayload>;
export {};
