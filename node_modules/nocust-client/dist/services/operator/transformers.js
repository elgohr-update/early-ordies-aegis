"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var constants_1 = require("../../constants");
var signature_1 = require("../../wallet/signature");
var store_1 = require("../../store");
exports.transformDepositFromServer = function (data) { return ({
    txId: data.txId,
    block: data.block,
    eon: data.eon,
    amount: new bignumber_js_1.default(data.amount),
}); };
exports.transformTransactionFromServer = function (transactionData) {
    return {
        id: transactionData.id,
        txId: transactionData.txId,
        amount: new bignumber_js_1.default(transactionData.amount),
        amountSwapped: transactionData.amountSwapped
            ? new bignumber_js_1.default(transactionData.amountSwapped)
            : null,
        sender: transactionData.wallet,
        recipient: transactionData.recipient,
        nonce: new bignumber_js_1.default(transactionData.nonce),
        passiveMarker: new bignumber_js_1.default(transactionData.passiveMarker),
        eon: transactionData.eon,
        time: transactionData.time,
        swap: transactionData.swap || !!transactionData.amountSwapped,
        complete: transactionData.complete,
        voided: transactionData.voided,
        processed: transactionData.processed,
        cancelled: transactionData.cancelled,
        appended: transactionData.appended,
        matchedAmounts: transactionData.matchedAmounts
            ? {
                in: new bignumber_js_1.default(transactionData.matchedAmounts.matchedIn),
                out: new bignumber_js_1.default(transactionData.matchedAmounts.matchedOut),
            }
            : { in: constants_1.BN_ZERO, out: constants_1.BN_ZERO },
        senderActiveState: exports.transformActiveStateFromServer(transactionData.wallet, transactionData.eon, transactionData.senderActiveState),
        recipientActiveState: exports.transformActiveStateFromServer(transactionData.wallet, transactionData.eon, transactionData.recipientActiveState),
        senderCancellationActiveState: exports.transformActiveStateFromServer(transactionData.wallet, transactionData.eon, transactionData.senderCancellationActiveState),
        recipientCancellationActiveState: exports.transformActiveStateFromServer(transactionData.wallet, transactionData.eon, transactionData.recipientCancellationActiveState),
        senderFinalizationActiveState: exports.transformActiveStateFromServer(transactionData.wallet, transactionData.eon, transactionData.senderFinalizationActiveState),
        recipientFinalizationActiveState: exports.transformActiveStateFromServer(transactionData.wallet, transactionData.eon, transactionData.recipientFinalizationActiveState),
        recipientFulfillmentActiveState: exports.transformActiveStateFromServer(transactionData.wallet, transactionData.eon, transactionData.recipientFulfillmentActiveState),
    };
};
exports.transformActiveStateFromServer = function (wallet, eon, acitveStateData) {
    if (!acitveStateData) {
        return null;
    }
    var walletSignature = acitveStateData.walletSignature
        ? signature_1.createSignature(wallet.address, acitveStateData.txSetHash, acitveStateData.walletSignature)
        : null;
    var operatorSignature = acitveStateData.operatorSignature
        ? signature_1.createSignature(store_1.store.contractOwner, acitveStateData.txSetHash, acitveStateData.operatorSignature)
        : null;
    return {
        address: wallet.address,
        token: wallet.token,
        eon: eon,
        trailIdentifier: wallet.trailIdentifier,
        spent: new bignumber_js_1.default(acitveStateData.updatedSpendings),
        gained: new bignumber_js_1.default(acitveStateData.updatedGains),
        transactionSetHash: acitveStateData.txSetHash,
        operatorSignature: operatorSignature,
        walletSignature: walletSignature,
    };
};
//# sourceMappingURL=transformers.js.map