"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var contracts_1 = require("../contracts");
var nocust_1 = require("../../nocust");
var errors_1 = require("../../helpers/errors");
var constants_1 = require("../../constants");
var store_1 = require("../../store");
var operator_1 = require("../operator");
function runChallengeChecks(wallet) {
    return __awaiter(this, void 0, void 0, function () {
        var currentEra, challengeBook, stateUpdateChallengeIssued, stateUpdateChallengeEonsKept, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    return [4, nocust_1.nocust.getEra()];
                case 1:
                    currentEra = _a.sent();
                    if (currentEra < store_1.store.blocksPerEon / 4) {
                        return [2, Promise.reject(new errors_1.NCError(errors_1.NCErrorCode.CAN_NOT_ISSUE_STATE_UPDATE_CHALLENGE, "Cannot initiate state update challenge in the first quarter of an eon, you can try again in " + (store_1.store.blocksPerEon /
                                4 -
                                currentEra) + " blocks"))];
                    }
                    if (wallet.registrationEon === wallet.currentEon.eon) {
                        return [2, Promise.reject(new errors_1.NCError(errors_1.NCErrorCode.CAN_NOT_ISSUE_STATE_UPDATE_CHALLENGE, 'Wallet is in registeration eon'))];
                    }
                    if (!wallet.previousEon) {
                        return [2, Promise.reject(new errors_1.NCError(errors_1.NCErrorCode.CAN_NOT_ISSUE_STATE_UPDATE_CHALLENGE, 'Wallet has no previous eon'))];
                    }
                    if (wallet.registrationEon < wallet.previousEon.eon &&
                        !wallet.previousEon.proofOfExclusiveBalanceAllotment) {
                        return [2, Promise.reject(new errors_1.NCError(errors_1.NCErrorCode.CAN_NOT_ISSUE_STATE_UPDATE_CHALLENGE, "Wallet's previous eon missing proof of exclussive alottment"))];
                    }
                    return [4, contracts_1.contracts.getWalletChallenges(wallet.address, wallet.token)];
                case 2:
                    challengeBook = _a.sent();
                    stateUpdateChallengeIssued = parseInt(challengeBook[0].valueOf(), 10) > 0;
                    stateUpdateChallengeEonsKept = parseInt(challengeBook[2].valueOf(), 10);
                    if (stateUpdateChallengeIssued || stateUpdateChallengeEonsKept >= wallet.currentEon.eon - 1) {
                        return [2, Promise.reject(new errors_1.NCError(errors_1.NCErrorCode.CAN_NOT_ISSUE_STATE_UPDATE_CHALLENGE, 'Wallet has already issued an update challenge'))];
                    }
                    return [3, 4];
                case 3:
                    e_1 = _a.sent();
                    return [2, Promise.reject(e_1)];
                case 4: return [2];
            }
        });
    });
}
exports.runChallengeChecks = runChallengeChecks;
function issueStateUpdateChallenge(address, token, gas, gasPrice) {
    return __awaiter(this, void 0, void 0, function () {
        var wallet, lastSubmittedEon, walletState, prevEonLastTransaction, operatorSignature, isOutgoing, _a, prevSpent, prevGained, e_2;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 5, , 6]);
                    return [4, nocust_1.nocust.getWallet(address, token)];
                case 1:
                    wallet = _b.sent();
                    return [4, nocust_1.nocust.getLastSubmittedEon()];
                case 2:
                    lastSubmittedEon = _b.sent();
                    return [4, operator_1.operator.fetchWalletState({
                            address: address,
                            token: token,
                            eon: lastSubmittedEon - 1,
                        })];
                case 3:
                    walletState = _b.sent();
                    return [4, runChallengeChecks(wallet)];
                case 4:
                    _b.sent();
                    prevEonLastTransaction = wallet.previousEon.lastTransaction;
                    operatorSignature = constants_1.EMPTY_SIGNATURE;
                    if (prevEonLastTransaction) {
                        isOutgoing = wallet.address === prevEonLastTransaction.sender.address &&
                            wallet.token === prevEonLastTransaction.sender.token;
                        operatorSignature = isOutgoing
                            ? prevEonLastTransaction.senderActiveState.operatorSignature
                            : prevEonLastTransaction.recipientActiveState.operatorSignature;
                    }
                    else if (wallet.previousEon.eon === wallet.registrationEon) {
                        operatorSignature = wallet.operatorRegistrationSignature;
                    }
                    _a = wallet.previousEon.spentAndGained, prevSpent = _a.spent, prevGained = _a.gained;
                    if (wallet.previousEon.proofOfExclusiveBalanceAllotment) {
                        return [2, contracts_1.contracts.submitInitialMerkleStateChallenge({
                                address: wallet.address,
                                proof: wallet.previousEon.proofOfExclusiveBalanceAllotment,
                                spent: prevSpent,
                                gained: prevGained,
                                operatorSignature: operatorSignature,
                                gas: gas,
                                gasPrice: gasPrice,
                                walletState: walletState,
                            })];
                    }
                    else {
                        return [2, contracts_1.contracts.submitInitialEmptyStateChallenge({
                                address: wallet.address,
                                token: wallet.token,
                                trailIdentifier: wallet.trailIdentifier,
                                spent: prevSpent,
                                gained: prevGained,
                                operatorSignature: operatorSignature,
                                gas: gas,
                                gasPrice: gasPrice,
                                walletState: walletState,
                            })];
                    }
                    return [3, 6];
                case 5:
                    e_2 = _b.sent();
                    console.log(e_2);
                    return [2, Promise.reject(e_2)];
                case 6: return [2];
            }
        });
    });
}
exports.default = issueStateUpdateChallenge;
//# sourceMappingURL=stateUpdateChallenge.js.map