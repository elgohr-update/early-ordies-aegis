"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var getWallet_1 = __importDefault(require("../../nocust/getWallet"));
var errors_1 = require("../../helpers/errors");
var utils_1 = require("../../helpers/utils");
var operator_1 = require("../operator");
var contracts_1 = require("../contracts");
var constants_1 = require("../../constants");
var CHALLENGE_GAS_LIMIT = 300000;
function deliveryChallengeChekcer(wallet, id) {
    return __awaiter(this, void 0, void 0, function () {
        var transfer;
        return __generator(this, function (_a) {
            try {
                if (wallet.registrationEon === wallet.currentEon.eon) {
                    return [2, Promise.reject(new errors_1.NCError(errors_1.NCErrorCode.CAN_NOT_ISSUE_DELIVERY_CHALLENGE, 'Wallet is in registeration eon'))];
                }
                if (!wallet.previousEon) {
                    return [2, Promise.reject(new errors_1.NCError(errors_1.NCErrorCode.CAN_NOT_ISSUE_DELIVERY_CHALLENGE, 'Wallet has no previous eon'))];
                }
                transfer = wallet.previousEon.transactions.find(function (x) { return x.id === id; });
                if (!transfer) {
                    return [2, Promise.reject(new errors_1.NCError(errors_1.NCErrorCode.CAN_NOT_ISSUE_DELIVERY_CHALLENGE, "Could not find relevant transfer data for txId " + id + ". Only transfers from the previous eonNumber can be challenged."))];
                }
                if (!utils_1.isSameHexValue(wallet.address, transfer.sender.address) &&
                    !utils_1.isSameHexValue(wallet.address, transfer.recipient.address)) {
                    return [2, Promise.reject(new errors_1.NCError(errors_1.NCErrorCode.CAN_NOT_ISSUE_DELIVERY_CHALLENGE, 'Not the owner of the transfer'))];
                }
            }
            catch (e) {
                return [2, Promise.reject(e)];
            }
            return [2, true];
        });
    });
}
exports.deliveryChallengeChekcer = deliveryChallengeChekcer;
function issueDeliveryChallenge(config) {
    return __awaiter(this, void 0, void 0, function () {
        var address, token, id, gasPrice, wallet, transfer, isOutgoing, _a, spent, gained, prevEonLastTransaction, operatorSignature, isOutgoing_1, e_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 4, , 5]);
                    address = config.address, token = config.token, id = config.id, gasPrice = config.gasPrice;
                    return [4, getWallet_1.default(address, token)];
                case 1:
                    wallet = _b.sent();
                    return [4, deliveryChallengeChekcer(wallet, id)];
                case 2:
                    _b.sent();
                    return [4, operator_1.operator.getTransfer(id)];
                case 3:
                    transfer = _b.sent();
                    isOutgoing = utils_1.isSameHexValue(wallet.address, transfer.recipient.address);
                    _a = wallet.previousEon.spentAndGained, spent = _a.spent, gained = _a.gained;
                    prevEonLastTransaction = wallet.previousEon.lastTransaction;
                    operatorSignature = constants_1.EMPTY_SIGNATURE;
                    if (prevEonLastTransaction) {
                        isOutgoing_1 = wallet.address === prevEonLastTransaction.sender.address &&
                            wallet.token === prevEonLastTransaction.sender.token;
                        operatorSignature = isOutgoing_1
                            ? prevEonLastTransaction.senderActiveState.operatorSignature
                            : prevEonLastTransaction.recipientActiveState.operatorSignature;
                    }
                    else if (wallet.previousEon.eon === wallet.registrationEon) {
                        operatorSignature = wallet.operatorRegistrationSignature;
                    }
                    return [2, contracts_1.contracts.submitDeliveryChallenge({
                            tokenAddress: token,
                            address: address,
                            senderAddress: transfer.wallet.address,
                            recipientAddress: transfer.recipient.address,
                            nonce: new bignumber_js_1.default(transfer.nonce),
                            senderTrailIdentifier: isOutgoing
                                ? wallet.trailIdentifier
                                : transfer.recipient.trailIdentifier,
                            transferMembershipTrail: transfer.deliveryProof.transferMembershipTrail,
                            recipientTrailIdentifier: transfer.recipient.trailIdentifier,
                            chain: transfer.deliveryProof.transferMembershipChain,
                            txSetRoot: wallet.previousEon.activeState.transactionSetHash,
                            spent: spent,
                            gained: gained,
                            amount: transfer.amount,
                            operatorSignature: operatorSignature,
                            gas: CHALLENGE_GAS_LIMIT,
                            gasPrice: gasPrice,
                        })];
                case 4:
                    e_1 = _b.sent();
                    console.log(e_1);
                    return [2, Promise.reject(e_1)];
                case 5: return [2];
            }
        });
    });
}
exports.default = issueDeliveryChallenge;
//# sourceMappingURL=deliveryChallenge.js.map