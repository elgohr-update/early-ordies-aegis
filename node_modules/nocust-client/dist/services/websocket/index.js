"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var eventEmitter_1 = require("../../helpers/eventEmitter");
var handleWalletNotification_1 = require("./handleWalletNotification");
var handleTokenPairNotification_1 = require("./handleTokenPairNotification");
var utils_1 = require("../../helpers/utils");
var WSEventType;
(function (WSEventType) {
    WSEventType["REGISTRATION_CONFIRMATION"] = "REGISTRATION_CONFIRMATION";
    WSEventType["DEPOSIT_CONFIRMATION"] = "DEPOSIT_CONFIRMATION";
    WSEventType["CHECKPOINT_CREATED"] = "CHECKPOINT_CREATED";
    WSEventType["TRANSFER_CONFIRMATION"] = "TRANSFER_CONFIRMATION";
    WSEventType["SWAP_MATCH"] = "SWAP_MATCH";
    WSEventType["SWAP_CANCELLATION"] = "SWAP_CANCELLATION";
    WSEventType["SWAP_FINALIZATION"] = "SWAP_FINALIZATION";
})(WSEventType = exports.WSEventType || (exports.WSEventType = {}));
var ws;
var reconnectInterval = 500;
var startingSendQueue = [];
function init(url) {
    if (utils_1.detectEnvironment() === 'node')
        global.WebSocket = require('ws');
    createConnection(url);
}
function createConnection(url) {
    var _this = this;
    ws = new WebSocket(getOperatorWebSocketUrl(url));
    ws.onopen = function () {
        reconnectInterval = 500;
        while (startingSendQueue.length > 0) {
            var record = startingSendQueue.shift();
            send(record.command, record.args);
        }
    };
    ws.onclose = function () {
        console.log('ws connection is dropped, trying to reconnect...');
        setTimeout(function () { return createConnection(url); }, reconnectInterval);
    };
    ws.onmessage = function (event) { return __awaiter(_this, void 0, void 0, function () {
        var payload, _a, type, data, _b, streamName, param1, param2, e_1;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 5, , 6]);
                    payload = JSON.parse(event.data);
                    if (!(payload.type === 'notification')) return [3, 4];
                    _a = payload.data.data, type = _a.type, data = _a.data;
                    _b = __read(payload.data.type.split('/'), 3), streamName = _b[0], param1 = _b[1], param2 = _b[2];
                    if (!(streamName === 'wallet')) return [3, 2];
                    return [4, handleWalletNotification_1.handleWalletNotification('0x' + param2, '0x' + param1, type, data)];
                case 1:
                    _c.sent();
                    return [3, 4];
                case 2:
                    if (!(streamName === 'tokenpair')) return [3, 4];
                    return [4, handleTokenPairNotification_1.handleTokenPairNotification({})];
                case 3:
                    _c.sent();
                    _c.label = 4;
                case 4: return [3, 6];
                case 5:
                    e_1 = _c.sent();
                    console.log(e_1);
                    return [3, 6];
                case 6: return [2];
            }
        });
    }); };
}
function send(command, args) {
    if (ws.readyState === WebSocket.CONNECTING) {
        startingSendQueue.push({ command: command, args: args });
    }
    else {
        ws.send(JSON.stringify({ op: command, args: args }));
    }
}
function shutdown() {
    ws.onmessage = null;
    ws.onclose = null;
    ws.close();
    exports.websocket.events.removeEventAllListeners();
}
function getOperatorWebSocketUrl(url) {
    url += url.endsWith('/') ? 'ws/' : '/ws/';
    if (url.startsWith('https://')) {
        return 'wss://' + url.slice(8);
    }
    else if (url.startsWith('http://')) {
        return 'ws://' + url.slice(7);
    }
    else if (url.startsWith('ws://') || url.startsWith('wss://')) {
        return url;
    }
    else {
        throw Error('Unknown protocol');
    }
}
var defineEvent = function (event, address, token) {
    return event + '/' + address + '/' + token;
};
function waitForEvent(config) {
    return __awaiter(this, void 0, void 0, function () {
        var event, address, token, _a, timeout;
        return __generator(this, function (_b) {
            event = config.event, address = config.address, token = config.token, _a = config.timeout, timeout = _a === void 0 ? 30 : _a;
            return [2, new Promise(function (resolve, reject) {
                    var unsubscribe = exports.websocket.events.once(defineEvent(event, address, token), function (data) {
                        if (failTimer)
                            clearTimeout(failTimer);
                        resolve(data);
                    });
                    var failTimer = setTimeout(function () {
                        unsubscribe();
                        reject(new Error('[INTERNAL] Waiting for websocket message timeout'));
                    }, timeout * 1000);
                })];
        });
    });
}
exports.websocket = {
    events: new eventEmitter_1.EventEmitter(),
    init: init,
    shutdown: shutdown,
    send: send,
    waitForEvent: waitForEvent,
    defineEvent: defineEvent,
};
//# sourceMappingURL=index.js.map