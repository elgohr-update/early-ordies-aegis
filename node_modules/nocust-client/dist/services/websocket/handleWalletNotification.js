"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var parsers_1 = require("../operator/parsers");
var syncWallet_1 = require("../../wallet/syncWallet");
var _1 = require(".");
var wallet_1 = require("../../wallet");
var validators_1 = require("../operator/validators");
function handleWalletNotification(address, token, type, data) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, wallet, e_1, wallet, e_2, payload, wallet, e_3, eventType, payload, wallet, e_4, payload, wallet, e_5;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    console.log('==> incoming ws message:', type);
                    _a = type;
                    switch (_a) {
                        case 'REGISTERED_WALLET': return [3, 1];
                        case 'CONFIRMED_DEPOSIT': return [3, 2];
                        case 'CHECKPOINT_CREATED': return [3, 8];
                        case 'TRANSFER_CONFIRMATION': return [3, 14];
                        case 'SWAP_CONFIRMATION': return [3, 14];
                        case 'MATCHED_SWAP': return [3, 14];
                        case 'SWAP_CANCELLATION': return [3, 20];
                        case 'SWAP_FINALIZATION': return [3, 25];
                    }
                    return [3, 30];
                case 1:
                    {
                        if (validators_1.payloadValidators.isValidating)
                            validators_1.payloadValidators.validateWalletRegistration(data);
                        _1.websocket.events.emit(_1.websocket.defineEvent(_1.WSEventType.REGISTRATION_CONFIRMATION, address, token), {
                            address: address,
                            token: token,
                            registration: parsers_1.parseRegistration(data),
                        });
                        return [3, 30];
                    }
                    _b.label = 2;
                case 2:
                    if (validators_1.payloadValidators.isValidating)
                        validators_1.payloadValidators.validateDeposit(data);
                    _b.label = 3;
                case 3:
                    _b.trys.push([3, 6, , 7]);
                    wallet = wallet_1.getWallet(address, token);
                    if (!wallet) return [3, 5];
                    return [4, syncWallet_1.syncWallet(wallet, syncWallet_1.SyncWalletEvent.SYNC_DEPOSITS, [parsers_1.parseDeposit(data)])];
                case 4:
                    _b.sent();
                    _b.label = 5;
                case 5: return [3, 7];
                case 6:
                    e_1 = _b.sent();
                    console.log('[INTERNAL] Error syncing incoming deposit', e_1);
                    return [3, 7];
                case 7:
                    _1.websocket.events.emit(_1.websocket.defineEvent(_1.WSEventType.DEPOSIT_CONFIRMATION, address, token), data);
                    return [3, 30];
                case 8:
                    if (validators_1.payloadValidators.isValidating)
                        validators_1.payloadValidators.validateWalletState(data);
                    _b.label = 9;
                case 9:
                    _b.trys.push([9, 12, , 13]);
                    wallet = wallet_1.getWallet(address, token);
                    if (!wallet) return [3, 11];
                    return [4, syncWallet_1.syncWallet(wallet, syncWallet_1.SyncWalletEvent.INCREMENT_EON, parsers_1.parseWalletState(data))];
                case 10:
                    _b.sent();
                    _b.label = 11;
                case 11: return [3, 13];
                case 12:
                    e_2 = _b.sent();
                    console.log('[INTERNAL] Error syncing wallet on checkpoint creation', e_2);
                    return [3, 13];
                case 13:
                    _1.websocket.events.emit(_1.websocket.defineEvent(_1.WSEventType.CHECKPOINT_CREATED, address, token), data);
                    return [3, 30];
                case 14:
                    if (validators_1.payloadValidators.isValidating)
                        validators_1.payloadValidators.validateTransaction(data);
                    payload = parsers_1.parseTransaction(data);
                    _b.label = 15;
                case 15:
                    _b.trys.push([15, 18, , 19]);
                    wallet = wallet_1.getWallet(address, token);
                    if (!wallet) return [3, 17];
                    return [4, syncWallet_1.syncWallet(wallet, syncWallet_1.SyncWalletEvent.SYNC_TRANSACTIONS, { payloads: [payload] })];
                case 16:
                    _b.sent();
                    _b.label = 17;
                case 17: return [3, 19];
                case 18:
                    e_3 = _b.sent();
                    console.log('[INTERNAL] Error syncing wallet on transfer update', e_3);
                    return [3, 19];
                case 19:
                    eventType = type === 'MATCHED_SWAP' ? _1.WSEventType.SWAP_MATCH : _1.WSEventType.TRANSFER_CONFIRMATION;
                    _1.websocket.events.emit(_1.websocket.defineEvent(eventType, payload.recipient.address, payload.recipient.token), payload);
                    return [3, 30];
                case 20:
                    if (validators_1.payloadValidators.isValidating)
                        validators_1.payloadValidators.validateSwapCancellation(data);
                    payload = parsers_1.parseSwapCancellation(data);
                    wallet = wallet_1.getWallet(address, token);
                    if (!wallet) return [3, 24];
                    _b.label = 21;
                case 21:
                    _b.trys.push([21, 23, , 24]);
                    return [4, syncWallet_1.syncWallet(wallet, syncWallet_1.SyncWalletEvent.SYNC_SWAP_CANCELLATION, payload)];
                case 22:
                    _b.sent();
                    return [3, 24];
                case 23:
                    e_4 = _b.sent();
                    console.log('[INTERNAL] Error syncing wallet on swap cancellation', e_4);
                    return [3, 24];
                case 24:
                    _1.websocket.events.emit(_1.websocket.defineEvent(_1.WSEventType.SWAP_CANCELLATION, address, token), data);
                    return [3, 30];
                case 25:
                    if (validators_1.payloadValidators.isValidating)
                        validators_1.payloadValidators.validateSwapFinalization(data);
                    payload = parsers_1.parseSwapFinalization(data);
                    wallet = wallet_1.getWallet(address, token);
                    if (!wallet) return [3, 29];
                    _b.label = 26;
                case 26:
                    _b.trys.push([26, 28, , 29]);
                    return [4, syncWallet_1.syncWallet(wallet, syncWallet_1.SyncWalletEvent.SYNC_SWAP_FINALIZATION, payload)];
                case 27:
                    _b.sent();
                    return [3, 29];
                case 28:
                    e_5 = _b.sent();
                    console.log('[INTERNAL] Error syncing wallet on swap cancellation', e_5);
                    return [3, 29];
                case 29:
                    _1.websocket.events.emit(_1.websocket.defineEvent(_1.WSEventType.SWAP_FINALIZATION, address, token), data);
                    return [3, 30];
                case 30: return [2];
            }
        });
    });
}
exports.handleWalletNotification = handleWalletNotification;
//# sourceMappingURL=handleWalletNotification.js.map