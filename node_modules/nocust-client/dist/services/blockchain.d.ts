import Web3 from 'web3';
import BigNumber from 'bignumber.js';
import { Signature } from '../wallet/signature';
import { TransferParentChainConfig } from '../nocust/transferParentChain';
export declare let web3: Web3;
declare function init(rpcUrl: string, contractAddress: string): void;
declare function addPrivateKey(privateKey: string): string;
declare function getETHBalance(address: string): Promise<BigNumber>;
declare function getERC20Balance(address: string, token: string): Promise<BigNumber>;
declare type NocustSendMethodConfig = {
    address: string;
    name: string;
    params?: Array<any>;
    amount?: BigNumber | string | any;
    gasPrice: string;
    gasLimit: number;
    nonce?: number;
};
declare function sendNocustMethod(config: NocustSendMethodConfig): Promise<any>;
declare type ERC20SendMethodConfig = Omit<NocustSendMethodConfig, 'amount'> & {
    token: string;
};
declare function sendERC20Method(config: ERC20SendMethodConfig): Promise<any>;
declare function sign(address: string, hash: string): Promise<Signature>;
export declare const blockchain: {
    addPrivateKey: typeof addPrivateKey;
    callERC20Method: (token: string, name: string, params?: any[]) => Promise<any>;
    callNocustMethod: (name: string, params?: any[]) => Promise<any>;
    fetchEVMRevertMessage: (txId: string) => Promise<string>;
    getBlockNumber: () => Promise<number>;
    getETHBalance: typeof getETHBalance;
    getERC20Balance: typeof getERC20Balance;
    fetchNetworkId: () => Promise<never>;
    init: typeof init;
    isPrivateKeyAdded: (address: string) => boolean;
    sendERC20Method: typeof sendERC20Method;
    sendNocustMethod: typeof sendNocustMethod;
    sendEther: ({ from, to, amount, gasPrice }: TransferParentChainConfig) => Promise<import("web3-core").TransactionReceipt>;
    sendERC20: ({ from, to, token, amount, gasPrice }: TransferParentChainConfig) => Promise<any>;
    sign: typeof sign;
    validateSignature: (hash: string, signature: string, address: string) => boolean;
    estimateGasOfNocustMethod: (name: string, from: string, value: string, params?: any[]) => Promise<number>;
};
export {};
