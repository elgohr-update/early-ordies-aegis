"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var transaction_1 = require("../wallet/transaction");
var constants_1 = require("../constants");
var activeState_1 = require("../wallet/activeState");
var merkleTree_1 = require("../wallet/merkleTree");
var balanceMarker_1 = require("../wallet/balanceMarker");
var blockchain_1 = require("./blockchain");
function createSwapOrderSignatures(config) {
    return __awaiter(this, void 0, void 0, function () {
        var creditAmount, debitAmount, creditWallet, debitWallet, nonce, creditStartingBalance, debitStartingBalance, eon, creditActiveStates, debitActiveStates, fulfillmentActiveStates, creditBalanceMarkers, debitBalanceMarkers, debitTransactionSetNodes, creditTransactionSetNodes, fulfilledTransactionSetNodes, i, creditSwap, debitSwap, fulfilledSwap, _a, creditSpent, creditGained, _b, debitSpent, debitGained, creditActiveState, debitActiveState, fulfillmentActiveState, creditBalanceMarker, debitBalanceMarker, swapWalletAddress, _c, creditActiveStateSignatures, debitActiveStateSignatures, creditBalanceSignatures, debitBalanceSignatures, fulfillmentActiveStateSignatures;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    creditAmount = config.creditAmount, debitAmount = config.debitAmount, creditWallet = config.creditWallet, debitWallet = config.debitWallet, nonce = config.nonce;
                    creditStartingBalance = creditWallet.currentEon.initialBalanceAllotment;
                    debitStartingBalance = debitWallet.currentEon.initialBalanceAllotment;
                    eon = debitWallet.currentEon.eon;
                    creditActiveStates = [];
                    debitActiveStates = [];
                    fulfillmentActiveStates = [];
                    creditBalanceMarkers = [];
                    debitBalanceMarkers = [];
                    debitTransactionSetNodes = debitWallet.currentEon.activeTransactions.map(function (t) {
                        return transaction_1.transactionToMerkleTree(t, debitWallet);
                    });
                    creditTransactionSetNodes = creditWallet.currentEon.activeTransactions.map(function (t) {
                        return transaction_1.transactionToMerkleTree(t, creditWallet);
                    });
                    fulfilledTransactionSetNodes = creditWallet.currentEon.activeTransactions.map(function (t) {
                        return transaction_1.transactionToMerkleTree(t, creditWallet);
                    });
                    for (i = 0; i < constants_1.SWAP_COUNT; i++) {
                        if (i !== 0) {
                            creditStartingBalance = constants_1.BN_ZERO;
                            debitStartingBalance = debitAmount;
                            debitTransactionSetNodes = [];
                            creditTransactionSetNodes = [];
                            fulfilledTransactionSetNodes = [];
                        }
                        creditSwap = {
                            amount: debitAmount,
                            amountSwapped: creditAmount,
                            creditToken: creditWallet.token,
                            debitToken: debitWallet.token,
                            nonce: nonce,
                            startingBalance: creditStartingBalance,
                            trailIdentifier: creditWallet.trailIdentifier,
                        };
                        debitSwap = __assign(__assign({}, creditSwap), { startingBalance: debitStartingBalance });
                        fulfilledSwap = __assign(__assign({}, creditSwap), { startingBalance: constants_1.BN_2_256_MINUS_1 });
                        creditTransactionSetNodes.push({ height: 0, hash: transaction_1.hashSwap(creditSwap) });
                        debitTransactionSetNodes.push({ height: 0, hash: transaction_1.hashSwap(debitSwap) });
                        fulfilledTransactionSetNodes.push({ height: 0, hash: transaction_1.hashSwap(fulfilledSwap) });
                        _a = creditWallet.currentEon.spentAndGained, creditSpent = _a.spent, creditGained = _a.gained;
                        _b = debitWallet.currentEon.spentAndGained, debitSpent = _b.spent, debitGained = _b.gained;
                        if (i > 0) {
                            creditSpent = constants_1.BN_ZERO;
                            creditGained = constants_1.BN_ZERO;
                            debitSpent = constants_1.BN_ZERO;
                            debitGained = constants_1.BN_ZERO;
                        }
                        creditActiveState = __assign(__assign({}, creditWallet.currentEon.activeState), { spent: creditSpent, gained: creditGained, eon: eon + i, transactionSetHash: merkleTree_1.constructMerkleTree(creditTransactionSetNodes).hash });
                        debitActiveState = __assign(__assign({}, debitWallet.currentEon.activeState), { spent: debitSpent.plus(debitAmount), gained: debitGained, eon: eon + i, transactionSetHash: merkleTree_1.constructMerkleTree(debitTransactionSetNodes).hash });
                        fulfillmentActiveState = __assign(__assign({}, creditWallet.currentEon.activeState), { spent: creditSpent, gained: creditGained.plus(creditAmount), eon: eon + i, transactionSetHash: merkleTree_1.constructMerkleTree(fulfilledTransactionSetNodes).hash });
                        creditBalanceMarker = {
                            address: creditWallet.address,
                            balance: constants_1.BN_ZERO.toFixed(0),
                            eon: eon + i,
                            token: creditWallet.token,
                        };
                        debitBalanceMarker = {
                            address: debitWallet.address,
                            balance: constants_1.BN_ZERO.toFixed(0),
                            eon: eon + i,
                            token: debitWallet.token,
                        };
                        creditActiveStates.push(activeState_1.hashActiveState(creditActiveState));
                        debitActiveStates.push(activeState_1.hashActiveState(debitActiveState));
                        fulfillmentActiveStates.push(activeState_1.hashActiveState(fulfillmentActiveState));
                        creditBalanceMarkers.push(balanceMarker_1.hashBalanceMarker(creditBalanceMarker));
                        debitBalanceMarkers.push(balanceMarker_1.hashBalanceMarker(debitBalanceMarker));
                    }
                    swapWalletAddress = debitWallet.address;
                    return [4, Promise.all([
                            Promise.all(__spread(creditActiveStates.map(function (hash) { return blockchain_1.blockchain.sign(swapWalletAddress, hash); }))),
                            Promise.all(__spread(debitActiveStates.map(function (hash) { return blockchain_1.blockchain.sign(swapWalletAddress, hash); }))),
                            Promise.all(__spread(creditBalanceMarkers.map(function (hash) { return blockchain_1.blockchain.sign(swapWalletAddress, hash); }))),
                            Promise.all(__spread(debitBalanceMarkers.map(function (hash) { return blockchain_1.blockchain.sign(swapWalletAddress, hash); }))),
                            Promise.all(__spread(fulfillmentActiveStates.map(function (hash) { return blockchain_1.blockchain.sign(creditWallet.address, hash); }))),
                        ])];
                case 1:
                    _c = __read.apply(void 0, [_d.sent(), 5]), creditActiveStateSignatures = _c[0], debitActiveStateSignatures = _c[1], creditBalanceSignatures = _c[2], debitBalanceSignatures = _c[3], fulfillmentActiveStateSignatures = _c[4];
                    return [2, {
                            creditActiveStateSignatures: creditActiveStateSignatures,
                            debitActiveStateSignatures: debitActiveStateSignatures,
                            fulfillmentActiveStateSignatures: fulfillmentActiveStateSignatures,
                            creditBalanceSignatures: creditBalanceSignatures,
                            debitBalanceSignatures: debitBalanceSignatures,
                        }];
            }
        });
    });
}
exports.createSwapOrderSignatures = createSwapOrderSignatures;
function createCancellationSignatures(debitWallet, creditWallet, swap) {
    return __awaiter(this, void 0, void 0, function () {
        var debitCancellationHashes, creditCancellationHashes, creditSwapIndex, _a, debitSpent, debitGained, debitEonMatchedAmounts, debitCancellationActiveState, _b, creditSpent, creditGained, creditCancellationActiveState, swapEonCount, i, debitFutureSpentGained, creditFutureSpentGained, futureDebitCancellationActiveState, futureCreditCancellationActiveState, swapWalletAddress_1, _c, debitCancellationSignatures, creditCancellationSignatures, e_1;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 3, , 4]);
                    debitCancellationHashes = [];
                    creditCancellationHashes = [];
                    creditSwapIndex = creditWallet.currentEon.transactions.findIndex(function (transaction) { return transaction.id === swap.id; });
                    creditWallet.currentEon.transactions[creditSwapIndex].cancelled = true;
                    _a = debitWallet.currentEon.spentAndGained, debitSpent = _a.spent, debitGained = _a.gained;
                    debitEonMatchedAmounts = debitWallet.currentEon.eonMatchedAmounts(swap);
                    debitCancellationActiveState = __assign(__assign({}, debitWallet.currentEon.activeState), { spent: debitSpent, gained: debitGained.plus(swap.amount).minus(debitEonMatchedAmounts.out) });
                    _b = creditWallet.currentEon.spentAndGained, creditSpent = _b.spent, creditGained = _b.gained;
                    creditCancellationActiveState = __assign(__assign({}, creditWallet.currentEon.activeState), { spent: creditSpent.plus(swap.amountSwapped), gained: creditGained.plus(swap.amountSwapped) });
                    debitCancellationHashes.push(activeState_1.hashActiveState(debitCancellationActiveState));
                    creditCancellationHashes.push(activeState_1.hashActiveState(creditCancellationActiveState));
                    return [4, transaction_1.getSwapEonCount(swap)];
                case 1:
                    swapEonCount = _d.sent();
                    for (i = 1; i <= constants_1.SWAP_COUNT - swapEonCount; i++) {
                        debitFutureSpentGained = bignumber_js_1.default.max(debitSpent, debitGained.plus(swap.amount).minus(debitEonMatchedAmounts.out)).plus(1);
                        creditFutureSpentGained = bignumber_js_1.default.max(creditSpent, creditGained)
                            .plus(swap.amountSwapped)
                            .plus(1);
                        futureDebitCancellationActiveState = __assign(__assign({}, debitWallet.currentEon.activeState), { transactionSetHash: constants_1.EMPTY_HASH, eon: swap.eon + i, spent: debitFutureSpentGained, gained: debitFutureSpentGained });
                        futureCreditCancellationActiveState = __assign(__assign({}, creditWallet.currentEon.activeState), { transactionSetHash: constants_1.EMPTY_HASH, eon: swap.eon + i, spent: creditFutureSpentGained, gained: creditFutureSpentGained });
                        debitCancellationHashes.push(activeState_1.hashActiveState(futureDebitCancellationActiveState));
                        creditCancellationHashes.push(activeState_1.hashActiveState(futureCreditCancellationActiveState));
                    }
                    swapWalletAddress_1 = debitWallet.address;
                    return [4, Promise.all([
                            Promise.all(__spread(debitCancellationHashes.map(function (hash) { return blockchain_1.blockchain.sign(swapWalletAddress_1, hash); }))),
                            Promise.all(__spread(creditCancellationHashes.map(function (hash) { return blockchain_1.blockchain.sign(swapWalletAddress_1, hash); }))),
                        ])];
                case 2:
                    _c = __read.apply(void 0, [_d.sent(), 2]), debitCancellationSignatures = _c[0], creditCancellationSignatures = _c[1];
                    return [2, { debitCancellationSignatures: debitCancellationSignatures, creditCancellationSignatures: creditCancellationSignatures }];
                case 3:
                    e_1 = _d.sent();
                    return [2, Promise.reject(e_1)];
                case 4: return [2];
            }
        });
    });
}
exports.createCancellationSignatures = createCancellationSignatures;
function createFinalizationSignatures(creditWallet, swap) {
    return __awaiter(this, void 0, void 0, function () {
        var finalizationHashes, _a, creditSpent, creditGained, finalizationActiveState, swapEonCount, i, futureSpentGained, futureFinalizationActiveState, finalizationSignatures, e_2;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 3, , 4]);
                    finalizationHashes = [];
                    _a = creditWallet.currentEon.spentAndGained, creditSpent = _a.spent, creditGained = _a.gained;
                    finalizationActiveState = __assign(__assign({}, creditWallet.currentEon.activeState), { spent: creditSpent.plus(swap.amountSwapped), gained: creditGained.plus(swap.amountSwapped) });
                    finalizationHashes.push(activeState_1.hashActiveState(finalizationActiveState));
                    return [4, transaction_1.getSwapEonCount(swap)];
                case 1:
                    swapEonCount = _b.sent();
                    for (i = 1; i <= constants_1.SWAP_COUNT - swapEonCount; i++) {
                        futureSpentGained = bignumber_js_1.default.max(creditSpent, creditGained)
                            .plus(swap.amountSwapped)
                            .plus(1);
                        futureFinalizationActiveState = __assign(__assign({}, creditWallet.currentEon.activeState), { spent: futureSpentGained, gained: futureSpentGained, transactionSetHash: constants_1.EMPTY_HASH, eon: swap.eon + i });
                        finalizationHashes.push(activeState_1.hashActiveState(futureFinalizationActiveState));
                    }
                    return [4, Promise.all(__spread(finalizationHashes.map(function (hash) { return blockchain_1.blockchain.sign(creditWallet.address, hash); })))];
                case 2:
                    finalizationSignatures = _b.sent();
                    return [2, { finalizationSignatures: finalizationSignatures }];
                case 3:
                    e_2 = _b.sent();
                    return [2, Promise.reject(e_2)];
                case 4: return [2];
            }
        });
    });
}
exports.createFinalizationSignatures = createFinalizationSignatures;
//# sourceMappingURL=swaps.js.map