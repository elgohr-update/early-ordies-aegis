import BigNumber from 'bignumber.js';
import { ProofOfExclusiveBalanceAllotment } from '../wallet/eon';
import { Signature } from '../wallet/signature';
import { WalletStatePayload } from './operator/payloads';
declare type DepositConfig = {
    address: string;
    token: string;
    amount: BigNumber;
    gasPrice: string;
    nonce: number;
};
declare function deposit(config: DepositConfig): Promise<string>;
declare type RequestWithdrawalConfig = {
    address: string;
    amount: BigNumber;
    gasPrice: string;
    token: string;
    walletState: WalletStatePayload;
};
declare function requestWithdrawal(config: RequestWithdrawalConfig): Promise<string>;
declare function fetchBlocksPerEon(): Promise<number>;
declare function fetchGenesisBlock(): Promise<void>;
declare function fetchContractOwnerAddress(): Promise<void>;
declare function fetchSlackPeriod(): Promise<never>;
declare function fetchExtendedSlackPeriod(): Promise<never>;
declare function fetchEonsKept(): Promise<never>;
declare function fetchDepositsKept(): Promise<never>;
declare type SubmitInitialMerkleStateChallenge = {
    address: string;
    proof: ProofOfExclusiveBalanceAllotment;
    walletState: WalletStatePayload;
    spent: BigNumber;
    gained: BigNumber;
    operatorSignature: Signature;
    gas: number;
    gasPrice: BigNumber;
};
declare type SubmitInitialEmptyStateChallenge = {
    address: string;
    token: string;
    trailIdentifier: number;
    walletState: WalletStatePayload;
    spent: BigNumber;
    gained: BigNumber;
    operatorSignature: Signature;
    gas: number;
    gasPrice: BigNumber;
};
declare type SubmitDeliveryChallenge = {
    tokenAddress: string;
    address: string;
    senderAddress: string;
    recipientAddress: string;
    nonce: BigNumber;
    senderTrailIdentifier: number;
    transferMembershipTrail: number;
    recipientTrailIdentifier: number;
    chain: string[];
    txSetRoot: string;
    spent: BigNumber;
    gained: BigNumber;
    amount: BigNumber;
    operatorSignature: Signature;
    gas: number;
    gasPrice: BigNumber;
};
declare type RecoverFundsConfig = {
    token: string;
    address: string;
    activeStateChecksum: string;
    trail: number;
    round: number;
    allotmentChain: string[];
    membershipChain: string[];
    values: BigNumber[];
    left: BigNumber;
    right: BigNumber;
    passiveChecksum: string;
    passiveAmount: BigNumber;
    passiveMarker: BigNumber;
    gas: number;
    gasPrice: BigNumber;
};
export declare const contracts: {
    checkMissedCheckpointSubmission: () => Promise<boolean>;
    checkOutstandingChallenges: () => Promise<boolean>;
    deposit: typeof deposit;
    fetchBlocksPerEon: typeof fetchBlocksPerEon;
    fetchContractOwnerAddress: typeof fetchContractOwnerAddress;
    fetchGenesisBlock: typeof fetchGenesisBlock;
    getDepositsSumAtEon: (address: string, token: string, eon: number) => Promise<number>;
    fetchMinChallengeGasCost: () => Promise<void>;
    requestWithdrawal: typeof requestWithdrawal;
    getWalletChallenges: (address: string, token: string) => Promise<any>;
    fetchSlackPeriod: typeof fetchSlackPeriod;
    fetchExtendedSlackPeriod: typeof fetchExtendedSlackPeriod;
    fetchEonsKept: typeof fetchEonsKept;
    fetchDepositsKept: typeof fetchDepositsKept;
    submitInitialMerkleStateChallenge: (config: SubmitInitialMerkleStateChallenge) => Promise<any>;
    submitInitialEmptyStateChallenge: (config: SubmitInitialEmptyStateChallenge) => Promise<any>;
    submitDeliveryChallenge: (config: SubmitDeliveryChallenge) => Promise<any>;
    recoverAllFunds: (config: RecoverFundsConfig) => Promise<any>;
    getLastSubmissionEon: () => Promise<number>;
    checkIsWalletRecovered: (address: string, token: string) => Promise<boolean>;
};
export {};
