"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var store_1 = require("../store");
var operator_1 = require("../services/operator");
var getEon_1 = __importDefault(require("./getEon"));
var utils_1 = require("../helpers/utils");
function getMyOrders(address, baseTokenAddress, quoteTokenAddress) {
    return __awaiter(this, void 0, void 0, function () {
        var currentEon, promises, result;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, getEon_1.default()];
                case 1:
                    currentEon = _a.sent();
                    if (!store_1.store.swapWallets.get(address))
                        return [2];
                    promises = store_1.store.swapWallets.get(address).map(function (subAddress) { return __awaiter(_this, void 0, void 0, function () {
                        var swaps, sortedSwaps, swapDict, sortedSwaps_1, sortedSwaps_1_1, swap, isBuy, status_1;
                        var e_1, _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0: return [4, operator_1.operator.getTransfers({
                                        search: utils_1.remove0x(subAddress),
                                        swap: true,
                                        ordering: 'time',
                                        limit: 1000,
                                    })];
                                case 1:
                                    swaps = _b.sent();
                                    swaps = swaps.filter(function (swap) {
                                        return (swap.recipient.token === baseTokenAddress && swap.wallet.token === quoteTokenAddress) ||
                                            (swap.wallet.token === baseTokenAddress && swap.recipient.token === quoteTokenAddress);
                                    });
                                    sortedSwaps = swaps.sort(function (a, b) { return a.eon - b.eon; });
                                    swapDict = {};
                                    try {
                                        for (sortedSwaps_1 = __values(sortedSwaps), sortedSwaps_1_1 = sortedSwaps_1.next(); !sortedSwaps_1_1.done; sortedSwaps_1_1 = sortedSwaps_1.next()) {
                                            swap = sortedSwaps_1_1.value;
                                            isBuy = swap.recipient.token === baseTokenAddress;
                                            if (!swap.voided && swap.eon <= currentEon) {
                                                status_1 = 'pending';
                                                if (swap.cancelled) {
                                                    status_1 = 'cancelled';
                                                }
                                                if (swap.complete) {
                                                    status_1 = 'complete';
                                                }
                                                swapDict[swap.txId] = {
                                                    txId: swap.txId,
                                                    id: swap.id,
                                                    time: swap.time,
                                                    baseTokenAddress: baseTokenAddress,
                                                    quoteTokenAddress: quoteTokenAddress,
                                                    amount: isBuy ? swap.amountSwapped : swap.amount,
                                                    price: isBuy
                                                        ? swap.amount.dividedBy(swap.amountSwapped)
                                                        : swap.amountSwapped.dividedBy(swap.amount),
                                                    status: status_1,
                                                    eon: swap.eon,
                                                    type: isBuy ? 'Buy' : 'Sell',
                                                };
                                            }
                                        }
                                    }
                                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                                    finally {
                                        try {
                                            if (sortedSwaps_1_1 && !sortedSwaps_1_1.done && (_a = sortedSwaps_1.return)) _a.call(sortedSwaps_1);
                                        }
                                        finally { if (e_1) throw e_1.error; }
                                    }
                                    return [2, Object.keys(swapDict).map(function (txId) {
                                            var swapsByTxId = sortedSwaps.filter(function (swap) { return swap.txId === txId; });
                                            var latestEonSwap = swapsByTxId.reverse()[0];
                                            var swap = swapDict[txId];
                                            if (swap.eon < currentEon && swap.status === 'pending') {
                                                swap.status = 'expired';
                                            }
                                            if (latestEonSwap.eon >= currentEon && swap.status === 'pending') {
                                                swap.expiry = latestEonSwap.eon - currentEon + 1;
                                            }
                                            return swap;
                                        })];
                            }
                        });
                    }); });
                    return [4, Promise.all(promises)];
                case 2:
                    result = _a.sent();
                    return [2, result.reduce(function (total, arr) {
                            return total.concat(arr);
                        }, [])];
            }
        });
    });
}
exports.default = getMyOrders;
//# sourceMappingURL=getMyOrders.js.map