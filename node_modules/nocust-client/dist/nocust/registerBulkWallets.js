"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var operator_1 = require("../services/operator");
var blockchain_1 = require("../services/blockchain");
var store_1 = require("../store");
var wallet_1 = require("../wallet");
var activeState_1 = require("../wallet/activeState");
var constants_1 = require("../constants");
var websocket_1 = require("../services/websocket");
function registerBulkWallets(walletsConfig) {
    return __awaiter(this, void 0, void 0, function () {
        var status_1, eon_1, tosHash_1, unregisteredWallets_1, bulkRequestConfig, wsNotificationsData_1, wsNotificationPromises, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 7, , 8]);
                    return [4, operator_1.operator.getStatus()];
                case 1:
                    status_1 = _a.sent();
                    eon_1 = status_1.latest.eon;
                    return [4, store_1.getToSHash()];
                case 2:
                    tosHash_1 = _a.sent();
                    unregisteredWallets_1 = [];
                    return [4, Promise.all(walletsConfig.map(function (wallet) {
                            return operator_1.operator.getWalletRegistration(wallet.address, wallet.token).catch(function () {
                                unregisteredWallets_1.push(wallet);
                            });
                        }))];
                case 3:
                    _a.sent();
                    if (!(unregisteredWallets_1.length > 0)) return [3, 6];
                    return [4, Promise.all(unregisteredWallets_1.map(function (config) { return prepareBulkRegistrationConfig(config, tosHash_1, eon_1); }))];
                case 4:
                    bulkRequestConfig = _a.sent();
                    wsNotificationsData_1 = [];
                    wsNotificationPromises = unregisteredWallets_1.map(function (config) {
                        return websocket_1.websocket
                            .waitForEvent({
                            event: websocket_1.WSEventType.REGISTRATION_CONFIRMATION,
                            address: config.address,
                            token: config.token || store_1.store.contractAddress,
                        })
                            .then(function (websocketData) {
                            wsNotificationsData_1.push(websocketData);
                        });
                    });
                    return [4, Promise.all(__spread(wsNotificationPromises, [
                            operator_1.operator.registerBulkWallets(bulkRequestConfig),
                        ]))];
                case 5:
                    _a.sent();
                    bulkRequestConfig.forEach(function (config, index) {
                        wallet_1.fillWalletRegistration(config.wallet, __assign(__assign({}, wsNotificationsData_1[index].registration), { hash: config.authHash }));
                        wallet_1.updateWallet(config.wallet);
                    });
                    _a.label = 6;
                case 6: return [3, 8];
                case 7:
                    err_1 = _a.sent();
                    return [2, Promise.reject(err_1)];
                case 8: return [2];
            }
        });
    });
}
exports.default = registerBulkWallets;
function prepareBulkRegistrationConfig(config, tosHash, eon) {
    return __awaiter(this, void 0, void 0, function () {
        var wallet, authHash, tosSignature, authSignature;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    wallet = wallet_1.createWallet(config.address, config.token || store_1.store.contractAddress, config.parentAddress);
                    authHash = activeState_1.hashActiveState({
                        token: config.token || store_1.store.contractAddress,
                        address: config.address,
                        eon: eon,
                        trailIdentifier: 0,
                        transactionSetHash: constants_1.EMPTY_HASH,
                        spent: constants_1.BN_ZERO,
                        gained: constants_1.BN_ZERO,
                    });
                    return [4, blockchain_1.blockchain.sign(config.address, tosHash)];
                case 1:
                    tosSignature = _a.sent();
                    return [4, blockchain_1.blockchain.sign(config.address, authHash)];
                case 2:
                    authSignature = _a.sent();
                    return [2, {
                            wallet: wallet,
                            tosSignature: tosSignature,
                            authSignature: authSignature,
                            authHash: authHash,
                        }];
            }
        });
    });
}
//# sourceMappingURL=registerBulkWallets.js.map