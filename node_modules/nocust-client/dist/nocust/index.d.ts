import BigNumber from 'bignumber.js';
import { OrderBook } from './getOrderBook';
import { SLAInfo } from './getSLAInfo';
import { TokenInfo } from './getSupportedTokens';
import { Transaction } from '../wallet/transaction';
import { Wallet } from '../wallet';
import { MyOrder } from './getMyOrders';
interface NOCUST {
    addPrivateKey(privateKey: string): Promise<string>;
    approveDeposits(config: {
        address: string;
        token: string;
        gasPrice: string | BigNumber;
    }): Promise<string>;
    buySLA(address: string): Promise<Transaction>;
    confirmWithdrawal(config: {
        address: string;
        gasPrice: BigNumber | string;
        token?: string;
    }): Promise<string>;
    deposit(config: {
        address: string;
        amount: BigNumber;
        gasPrice: string;
        token?: string;
        nonce?: number;
    }): Promise<string>;
    getBalance(address: string, token?: string): Promise<BigNumber>;
    getBlocksPerEon(): number;
    getBlocksToWithdrawalConfirmation(txHash: string): Promise<number>;
    getEon(): Promise<number>;
    getEra(): Promise<number>;
    getParentChainBalance(address: string, token?: string): Promise<BigNumber>;
    getOrderBook(baseTokenAddress: string, quoteTokenAddress: string): Promise<OrderBook>;
    getSLAInfo(): Promise<SLAInfo>;
    getSLAStatus(address: string): Promise<number>;
    getSupportedTokens(): Promise<TokenInfo[]>;
    getTransfer(id: number): Promise<Transaction>;
    getTransfers(config: {
        offset?: number;
        limit?: number;
        txId?: string;
        eon?: number;
        nonce?: number;
        search?: string;
        passive?: boolean;
        complete?: boolean;
        swap?: boolean;
        cancelled?: boolean;
        voided?: boolean;
        ordering?: string;
    }): Promise<Transaction[]>;
    getWallet(address: string, token?: string): Promise<Wallet>;
    getWithdrawalFee(gasPrice: BigNumber | string): BigNumber;
    getWithdrawalLimit(address: string, token?: string): Promise<BigNumber>;
    getLastSubmittedEon(): Promise<number>;
    isWalletRecovered(config: {
        address: string;
        token?: string;
    }): Promise<boolean>;
    hasOutstandingChallenges(): Promise<boolean>;
    init(config: {
        contractAddress: string;
        rpcUrl: string;
        operatorUrl: string;
        storageEngine?: {
            get(key: string): Promise<string>;
            set(key: string, value: string): Promise<boolean>;
            delete(key: string): Promise<boolean>;
            [T: string]: any;
        };
        privateKey?: string;
    }): Promise<void>;
    isWalletRegistered(address: string, token?: string): Promise<boolean>;
    isRecoveryMode(): Promise<boolean>;
    issueDeliveryChallenge(config: {
        address: string;
        token: string;
        id: number;
        gasPrice: BigNumber;
    }): Promise<string>;
    issueStateUpdateChallenge(config: {
        address: string;
        gasPrice: BigNumber;
        token?: string;
        gasLimit?: number;
    }): Promise<string>;
    recoverFunds(config: {
        address: string;
        gasPrice: BigNumber;
        token?: string;
    }): Promise<string>;
    registerWallet(address: string, token?: string): Promise<void>;
    registerBulkWallets(wallets: {
        address: string;
        token?: string;
    }[]): Promise<void>;
    shutdown(): void;
    subscribe(config: {
        address: string;
        token?: string;
        event: 'TRANSFER_CONFIRMATION';
        callback: (data: Object) => void;
    }): Function;
    addOrder(config: {
        address: string;
        baseTokenAddress: string;
        quoteTokenAddress: string;
        amount: BigNumber;
        price: BigNumber;
        orderType: 'BUY' | 'SELL';
    }): Promise<Transaction>;
    cancelOrder(address: string, id: number): Promise<void>;
    getMyOrders(address: string, baseTokenAddress: string, quoteTokenAddress: string): Promise<MyOrder[]>;
    transfer(config: {
        from: string;
        to: string;
        amount: BigNumber;
        token?: string;
        nonce?: BigNumber;
    }): Promise<Transaction>;
    transferParentChain(config: {
        from: string;
        to: string;
        token?: string;
        amount: string;
        gasPrice: string;
    }): Promise<string>;
    withdraw(config: {
        address: string;
        amount: BigNumber;
        gasPrice: string;
        token?: string;
    }): Promise<string>;
    signToS(address: string): Promise<void>;
    setupTrading(address: string, baseTokenAddress: string, quoteTokenAddress: string): Promise<void>;
}
export declare const nocust: NOCUST;
export {};
