"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var transaction_1 = require("../wallet/transaction");
var _1 = require(".");
var store_1 = require("../store");
var errors_1 = require("../helpers/errors");
var utils_1 = require("../helpers/utils");
var operator_1 = require("../services/operator");
var blockchain_1 = require("../services/blockchain");
var activeState_1 = require("../wallet/activeState");
var balanceMarker_1 = require("../wallet/balanceMarker");
var checks_1 = require("../wallet/checks");
var syncWallet_1 = require("../wallet/syncWallet");
var merkleTree_1 = require("../wallet/merkleTree");
var wallet_1 = require("../wallet");
function transfer(config) {
    return __awaiter(this, void 0, void 0, function () {
        var from, to, token, amount, nonce, wallet, currentEon, registrationData, proposedTransfer, proposedTransferNode, transactionSetNodes, transactionSetHash, balanceMarker, activeState, _a, activeStateSignature, balanceMarkerSignature, transferPayload_1, recipientWallet, e_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    from = config.from, to = config.to, token = config.token, amount = config.amount, nonce = config.nonce;
                    if (!token)
                        token = store_1.store.contractAddress;
                    if (utils_1.isSameHexValue(from, to))
                        return [2, Promise.reject(new errors_1.NCError(errors_1.NCErrorCode.TRANSFER_TO_SELF))];
                    return [4, _1.nocust.getWallet(from, token)];
                case 1:
                    wallet = _b.sent();
                    currentEon = wallet.currentEon;
                    if (currentEon.balance.isLessThan(amount)) {
                        return [2, Promise.reject(new errors_1.NCError(errors_1.NCErrorCode.INSUFFICIENT_COMMIT_CHAIN_BALANCE))];
                    }
                    return [4, operator_1.operator.getWalletRegistration(to, token)];
                case 2:
                    registrationData = _b.sent();
                    if (!registrationData)
                        return [2, Promise.reject(new errors_1.NCError(errors_1.NCErrorCode.WALLET_UNREGISTERED))];
                    checks_1.checkRegistration(to, token, registrationData);
                    if (!nonce)
                        nonce = utils_1.generateRandomNonce();
                    proposedTransfer = {
                        senderAddress: from,
                        recipientAddress: to,
                        recipientTrailIdentifier: registrationData.trailIdentifier,
                        amount: amount,
                        nonce: nonce,
                        isOutgoing: true,
                    };
                    proposedTransferNode = { height: 0, hash: transaction_1.hashTransfer(proposedTransfer) };
                    transactionSetNodes = __spread(currentEon.activeTransactions.map(function (t) { return transaction_1.transactionToMerkleTree(t, wallet); }), [
                        proposedTransferNode,
                    ]);
                    transactionSetHash = merkleTree_1.constructMerkleTree(transactionSetNodes).hash;
                    balanceMarker = {
                        address: wallet.address,
                        token: token,
                        eon: currentEon.eon,
                        balance: currentEon.balance.minus(amount).toFixed(0),
                    };
                    activeState = __assign(__assign({}, currentEon.activeState), { spent: currentEon.activeState.spent.plus(amount), transactionSetHash: transactionSetHash });
                    return [4, Promise.all([
                            blockchain_1.blockchain.sign(wallet.address, activeState_1.hashActiveState(activeState)),
                            blockchain_1.blockchain.sign(wallet.address, balanceMarker_1.hashBalanceMarker(balanceMarker)),
                        ])];
                case 3:
                    _a = __read.apply(void 0, [_b.sent(), 2]), activeStateSignature = _a[0], balanceMarkerSignature = _a[1];
                    _b.label = 4;
                case 4:
                    _b.trys.push([4, 9, , 14]);
                    return [4, operator_1.operator.sendTransfer({
                            activeStateSignature: activeStateSignature,
                            balanceMarkerSignature: balanceMarkerSignature,
                            balanceMarker: balanceMarker,
                            amount: proposedTransfer.amount,
                            senderAddress: from,
                            recipientAddress: to,
                            eon: wallet.currentEon.eon,
                            nonce: nonce,
                            tokenAddress: token,
                        })];
                case 5:
                    transferPayload_1 = _b.sent();
                    return [4, syncWallet_1.syncWallet(wallet, syncWallet_1.SyncWalletEvent.SYNC_TRANSACTIONS, { payloads: [transferPayload_1] })];
                case 6:
                    _b.sent();
                    recipientWallet = wallet_1.getWallet(to, token);
                    if (!recipientWallet) return [3, 8];
                    return [4, syncWallet_1.syncWallet(recipientWallet, syncWallet_1.SyncWalletEvent.SYNC_TRANSACTIONS, {
                            payloads: [transferPayload_1],
                        })];
                case 7:
                    _b.sent();
                    _b.label = 8;
                case 8: return [2, wallet.currentEon.transactions.find(function (t) { return t.id === transferPayload_1.id; })];
                case 9:
                    e_1 = _b.sent();
                    if (!(e_1.message === errors_1.NCServerErrorCode.EON_NUMBER_OUT_OF_SYNC)) return [3, 12];
                    return [4, utils_1.sleep(2000)];
                case 10:
                    _b.sent();
                    return [4, syncWallet_1.syncWallet(wallet, syncWallet_1.SyncWalletEvent.FULL_SYNC)];
                case 11:
                    _b.sent();
                    return [2, transfer(config)];
                case 12: return [2, Promise.reject(e_1)];
                case 13: return [3, 14];
                case 14: return [2];
            }
        });
    });
}
exports.default = transfer;
//# sourceMappingURL=transfer.js.map