"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var store_1 = require("../store");
var operator_1 = require("../services/operator");
var blockchain_1 = require("../services/blockchain");
var websocket_1 = require("../services/websocket");
var activeState_1 = require("../wallet/activeState");
var errors_1 = require("../helpers/errors");
var wallet_1 = require("../wallet");
var constants_1 = require("../constants");
function registerWallet(address, token) {
    return __awaiter(this, void 0, void 0, function () {
        var wallet, status_1, eon, hash, tosHash, tosSignature, authSignature, _a, websocketData, e_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 6, , 7]);
                    if (!token)
                        token = store_1.store.contractAddress;
                    if (!blockchain_1.blockchain.isPrivateKeyAdded(address)) {
                        return [2, Promise.reject(new errors_1.NCError(errors_1.NCErrorCode.NO_PRIVATE_KEY))];
                    }
                    wallet = wallet_1.createWallet(address, token);
                    return [4, operator_1.operator.getStatus()];
                case 1:
                    status_1 = _b.sent();
                    eon = status_1.latest.eon;
                    hash = activeState_1.hashActiveState({
                        token: token,
                        address: address,
                        eon: eon,
                        trailIdentifier: 0,
                        transactionSetHash: constants_1.EMPTY_HASH,
                        spent: constants_1.BN_ZERO,
                        gained: constants_1.BN_ZERO,
                    });
                    return [4, store_1.getToSHash()];
                case 2:
                    tosHash = _b.sent();
                    return [4, blockchain_1.blockchain.sign(address, tosHash)];
                case 3:
                    tosSignature = _b.sent();
                    return [4, blockchain_1.blockchain.sign(address, hash)];
                case 4:
                    authSignature = _b.sent();
                    return [4, Promise.all([
                            websocket_1.websocket.waitForEvent({
                                event: websocket_1.WSEventType.REGISTRATION_CONFIRMATION,
                                address: address,
                                token: token,
                                timeout: 20,
                            }),
                            operator_1.operator.registerWallet(wallet, authSignature, tosSignature),
                        ])];
                case 5:
                    _a = __read.apply(void 0, [_b.sent(), 1]), websocketData = _a[0];
                    if (wallet.address !== websocketData.address || wallet.token !== websocketData.token) {
                        return [2, Promise.reject(new Error('[INTERNAL] WebSocket registration data does not fit request'))];
                    }
                    wallet_1.fillWalletRegistration(wallet, __assign(__assign({}, websocketData.registration), { hash: hash }));
                    wallet_1.updateWallet(wallet);
                    return [2, websocketData];
                case 6:
                    e_1 = _b.sent();
                    return [2, Promise.reject(e_1)];
                case 7: return [2];
            }
        });
    });
}
exports.default = registerWallet;
//# sourceMappingURL=registerWallet.js.map