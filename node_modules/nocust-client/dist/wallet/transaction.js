"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var web3_1 = __importDefault(require("web3"));
var bignumber_js_1 = require("bignumber.js");
var constants_1 = require("../constants");
var utils_1 = require("../helpers/utils");
var operator_1 = require("../services/operator");
function hashTransfer(config) {
    var soliditySha3 = web3_1.default.utils.soliditySha3;
    var passiveMarker = config.passiveMarker || constants_1.BN_2_256_MINUS_1;
    console.log('passiveMarker', passiveMarker);
    var transferTag = new bignumber_js_1.BigNumber(utils_1.remove0x(soliditySha3({ t: 'uint256', v: passiveMarker.toFixed(0) }, { t: 'uint256', v: config.nonce.toFixed(0) }).toString()), 16);
    return soliditySha3({
        t: 'bytes32',
        v: soliditySha3({
            t: 'address',
            v: config.isOutgoing ? config.recipientAddress : config.senderAddress,
        }),
    }, { t: 'uint256', v: config.amount.toFixed(0) }, { t: 'uint64', v: config.recipientTrailIdentifier.toString() }, { t: 'uint256', v: transferTag.toFixed(0) }).toString();
}
exports.hashTransfer = hashTransfer;
function hashSwap(config) {
    var soliditySha3 = web3_1.default.utils.soliditySha3;
    return soliditySha3({ type: 'bytes32', value: soliditySha3({ type: 'address', value: config.debitToken }) }, { type: 'bytes32', value: soliditySha3({ type: 'address', value: config.creditToken }) }, { type: 'uint64', value: config.trailIdentifier.toString() }, { type: 'uint256', value: config.amount.toFixed(0) }, { type: 'uint256', value: config.amountSwapped.toFixed(0) }, { type: 'uint256', value: config.startingBalance.toFixed(0) }, { type: 'uint256', value: config.nonce.toFixed(0) }).toString();
}
exports.hashSwap = hashSwap;
function hashSwapFreezing(config) {
    var soliditySha3 = web3_1.default.utils.soliditySha3;
    return soliditySha3({ type: 'bytes32', value: soliditySha3({ type: 'address', value: config.debitToken }) }, { type: 'bytes32', value: soliditySha3({ type: 'address', value: config.creditToken }) }, { type: 'uint256', value: config.nonce.toFixed(0) }).toString();
}
exports.hashSwapFreezing = hashSwapFreezing;
function getTransactionActiveState(transaction, isOutgoing) {
    if (transaction.swap) {
        if (isOutgoing) {
            return transaction.senderCancellationActiveState
                ? transaction.senderCancellationActiveState
                : transaction.senderActiveState;
        }
        if (transaction.recipientFinalizationActiveState) {
            return transaction.recipientFinalizationActiveState;
        }
        if (transaction.recipientCancellationActiveState) {
            return transaction.recipientCancellationActiveState;
        }
        if (transaction.complete) {
            return transaction.recipientFulfillmentActiveState;
        }
        return transaction.recipientActiveState;
    }
    if (isOutgoing) {
        return transaction.senderActiveState;
    }
    return transaction.recipientActiveState;
}
exports.getTransactionActiveState = getTransactionActiveState;
function transactionToMerkleTree(transaction, wallet, lastTransaction) {
    var passiveMarkerValue;
    if (lastTransaction) {
        passiveMarkerValue =
            transaction.id === lastTransaction.id ? constants_1.BN_2_256_MINUS_1 : transaction.passiveMarker;
    }
    else {
        passiveMarkerValue = transaction.passiveMarker;
    }
    var isOutgoing = transaction.sender.address === wallet.address && transaction.sender.token === wallet.token;
    if (transaction.swap) {
        return {
            height: 0,
            hash: hashSwap({
                amount: transaction.amount,
                amountSwapped: transaction.amountSwapped,
                nonce: transaction.nonce,
                debitToken: transaction.sender.token,
                creditToken: transaction.recipient.token,
                startingBalance: !isOutgoing && (transaction.complete || transaction.cancelled)
                    ? constants_1.BN_2_256_MINUS_1
                    :
                        wallet.currentEon.initialBalanceAllotment,
                trailIdentifier: transaction.recipient.trailIdentifier,
            }),
        };
    }
    return {
        height: 0,
        hash: hashTransfer({
            amount: transaction.amount,
            nonce: transaction.nonce,
            recipientAddress: transaction.recipient.address,
            senderAddress: transaction.sender.address,
            recipientTrailIdentifier: transaction.recipient.trailIdentifier,
            passiveMarker: passiveMarkerValue,
            isOutgoing: isOutgoing,
        }),
    };
}
exports.transactionToMerkleTree = transactionToMerkleTree;
function getSwapEonCount(swap) {
    return __awaiter(this, void 0, void 0, function () {
        var swaps, eonCount, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4, operator_1.operator.getTransfers({ txId: swap.txId })];
                case 1:
                    swaps = _a.sent();
                    eonCount = swaps.reduce(function (count, s) {
                        if (s.eon <= swap.eon) {
                            return count + 1;
                        }
                        return count;
                    }, 0);
                    return [2, eonCount];
                case 2:
                    e_1 = _a.sent();
                    return [2, Promise.reject(e_1)];
                case 3: return [2];
            }
        });
    });
}
exports.getSwapEonCount = getSwapEonCount;
//# sourceMappingURL=transaction.js.map