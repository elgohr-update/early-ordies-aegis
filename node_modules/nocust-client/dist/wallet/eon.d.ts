import BigNumber from 'bignumber.js';
import { Transaction, MatchedAmounts } from './transaction';
import { MerkleTree } from './merkleTree';
import { ActiveState } from './activeState';
import { Deposit, Withdrawal, WithdrawalRequest } from './parentChainTxs';
import { IntervalProof } from './intervalTree';
import { Wallet } from './index';
import { Mutex } from 'async-mutex';
export declare class Eon {
    wallet: Wallet;
    eon: number;
    reactionLock: Mutex;
    membershipProofPath: string[];
    accountProof: IntervalProof;
    deposits: Deposit[];
    transactions: Transaction[];
    withdrawalRequest: WithdrawalRequest[];
    withdrawal: Withdrawal;
    get activeTransactions(): Transaction[];
    get lastTransaction(): Transaction;
    get outgoingTransactions(): Transaction[];
    get incomingTransactions(): Transaction[];
    get passiveAmountReceived(): BigNumber;
    get spentAndGained(): SpentAndGained;
    get deposited(): BigNumber;
    get initialBalanceAllotment(): BigNumber;
    get balance(): BigNumber;
    get activeTree(): MerkleTree;
    get passiveTree(): MerkleTree;
    get activeState(): ActiveState;
    get passiveAggregate(): PassiveAggregate;
    get isAvailableForSwaps(): boolean;
    eonMatchedAmounts(swap: Transaction): MatchedAmounts;
    constructor(wallet: Wallet, number: number);
    finalizeAndHarvestLocked(): Promise<void>;
    finalizeAndHarvest(): Promise<void>;
    clone(): Eon;
    toJSON(): Omit<Eon, 'wallet' | 'passiveAggregate' | 'activeState' | 'passiveTree' | 'outgoingTransactions' | 'incomingTransactions' | 'spent' | 'gained' | 'deposited' | 'balance' | 'activeTree' | 'clone' | 'toJSON' | 'proofOfExclusiveBalanceAllotment' | 'passiveAmountReceived' | 'initialBalanceAllotment' | 'spentAndGained' | 'lastTransaction' | 'eonMatchedAmounts' | 'activeTransactions' | 'isAvailableForSwaps' | 'finalizeAndHarvest' | 'reactionLock' | 'finalizeAndHarvestLocked'>;
    get proofOfExclusiveBalanceAllotment(): ProofOfExclusiveBalanceAllotment;
}
export interface ProofOfExclusiveBalanceAllotment {
    token: string;
    activeStateHash: string;
    membershipProofPath: string[];
    accountProof: IntervalProof;
    passiveAggregate: PassiveAggregate;
}
interface PassiveAggregate {
    passiveTreeRoot: string;
    passiveAmountReceived: BigNumber;
    lastOutgoingTransferPassiveMarker: BigNumber;
}
export interface SpentAndGained {
    spent: BigNumber;
    gained: BigNumber;
}
export {};
