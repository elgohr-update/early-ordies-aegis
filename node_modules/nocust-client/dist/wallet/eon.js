"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var mobx_1 = require("mobx");
var transaction_1 = require("./transaction");
var merkleTree_1 = require("./merkleTree");
var activeState_1 = require("./activeState");
var constants_1 = require("../constants");
var nocust_1 = require("../nocust");
var swaps_1 = require("../services/swaps");
var operator_1 = require("../services/operator");
var syncWallet_1 = require("./syncWallet");
var async_mutex_1 = require("async-mutex");
var Eon = (function () {
    function Eon(wallet, number) {
        var _this = this;
        this.reactionLock = new async_mutex_1.Mutex();
        this.wallet = wallet;
        this.eon = number;
        this.membershipProofPath = [];
        this.accountProof = {
            root: null,
            path: [],
            pathValues: [],
            left: constants_1.BN_ZERO,
            right: constants_1.BN_ZERO,
            trailIdentifier: this.wallet.trailIdentifier,
            leafChecksum: null,
            totalAllotment: null,
        };
        this.deposits = [];
        this.transactions = [];
        mobx_1.reaction(function () { return _this.lastTransaction; }, this.finalizeAndHarvestLocked.bind(this));
    }
    Object.defineProperty(Eon.prototype, "activeTransactions", {
        get: function () {
            var _this = this;
            return this.transactions.filter(function (t) { return !t.voided && !(!t.swap && t.recipient.address === _this.wallet.address); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Eon.prototype, "lastTransaction", {
        get: function () {
            return __spread(this.activeTransactions).pop();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Eon.prototype, "outgoingTransactions", {
        get: function () {
            var _this = this;
            return this.transactions.filter(function (t) { return t.sender.address === _this.wallet.address && t.sender.token === _this.wallet.token; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Eon.prototype, "incomingTransactions", {
        get: function () {
            var _this = this;
            return this.transactions.filter(function (t) { return t.recipient.address === _this.wallet.address && t.recipient.token === _this.wallet.token; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Eon.prototype, "passiveAmountReceived", {
        get: function () {
            return this.incomingTransactions
                .filter(function (t) { return !t.swap; })
                .reduce(function (sum, t) { return sum.plus(t.amount); }, constants_1.BN_ZERO);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Eon.prototype, "spentAndGained", {
        get: function () {
            if (!this.lastTransaction) {
                return { spent: constants_1.BN_ZERO, gained: constants_1.BN_ZERO };
            }
            var isOutgoing = this.wallet.address === this.lastTransaction.sender.address &&
                this.wallet.token === this.lastTransaction.sender.token;
            if (this.lastTransaction.swap &&
                !this.lastTransaction.recipientFinalizationActiveState &&
                !this.lastTransaction.cancelled &&
                !this.lastTransaction.voided) {
                var currentMatchedAmounts = this.eonMatchedAmounts(this.lastTransaction);
                if (isOutgoing) {
                    var spent = this.lastTransaction.senderActiveState.spent;
                    var gained = this.lastTransaction.senderActiveState.gained
                        .plus(this.lastTransaction.amount)
                        .minus(currentMatchedAmounts.out);
                    return { spent: spent, gained: gained };
                }
                else {
                    var spent = this.lastTransaction.recipientActiveState.spent;
                    var gained = this.lastTransaction.recipientActiveState.gained.plus(currentMatchedAmounts.in);
                    return { spent: spent, gained: gained };
                }
            }
            else {
                var lastTransactionState = transaction_1.getTransactionActiveState(this.lastTransaction, isOutgoing);
                var spent = lastTransactionState.spent;
                var gained = lastTransactionState.gained;
                if (this.lastTransaction.swap) {
                    var currentMatchedAmounts = this.eonMatchedAmounts(this.lastTransaction);
                    if (this.lastTransaction.complete && isOutgoing) {
                        var totalMatchedOut = this.lastTransaction.matchedAmounts.out;
                        gained = gained.plus(totalMatchedOut.minus(currentMatchedAmounts.out));
                    }
                    if (this.lastTransaction.cancelled &&
                        !this.lastTransaction.recipientCancellationActiveState &&
                        !isOutgoing) {
                        gained = gained.plus(currentMatchedAmounts.in);
                    }
                }
                return { spent: spent, gained: gained };
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Eon.prototype, "deposited", {
        get: function () {
            return this.deposits.reduce(function (sum, deposit) { return sum.plus(deposit.amount); }, constants_1.BN_ZERO);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Eon.prototype, "initialBalanceAllotment", {
        get: function () {
            return this.accountProof.right.minus(this.accountProof.left);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Eon.prototype, "balance", {
        get: function () {
            return this.initialBalanceAllotment
                .plus(this.deposited)
                .plus(this.passiveAmountReceived)
                .plus(this.spentAndGained.gained)
                .minus(this.spentAndGained.spent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Eon.prototype, "activeTree", {
        get: function () {
            var _this = this;
            return merkleTree_1.constructMerkleTree(this.activeTransactions.map(function (t) {
                return transaction_1.transactionToMerkleTree(t, _this.wallet, _this.lastTransaction);
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Eon.prototype, "passiveTree", {
        get: function () {
            var _this = this;
            return merkleTree_1.constructMerkleTree(this.incomingTransactions.map(function (t) {
                return transaction_1.transactionToMerkleTree(t, _this.wallet, _this.lastTransaction);
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Eon.prototype, "activeState", {
        get: function () {
            return {
                address: this.wallet.address,
                token: this.wallet.token,
                eon: this.eon,
                trailIdentifier: this.accountProof.trailIdentifier,
                transactionSetHash: this.activeTree.hash,
                spent: this.spentAndGained.spent,
                gained: this.spentAndGained.gained,
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Eon.prototype, "passiveAggregate", {
        get: function () {
            return {
                passiveTreeRoot: this.passiveTree.hash,
                passiveAmountReceived: this.passiveAmountReceived,
                lastOutgoingTransferPassiveMarker: this.outgoingTransactions.length > 0
                    ? this.outgoingTransactions[this.outgoingTransactions.length - 1].passiveMarker
                    : constants_1.BN_ZERO,
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Eon.prototype, "isAvailableForSwaps", {
        get: function () {
            var isAvailable = true;
            if (this.lastTransaction && this.lastTransaction.swap) {
                var swap = this.lastTransaction;
                var isPending = !swap.complete && !swap.senderCancellationActiveState && !swap.voided;
                if (isPending) {
                    return false;
                }
            }
            return isAvailable;
        },
        enumerable: true,
        configurable: true
    });
    Eon.prototype.eonMatchedAmounts = function (swap) {
        var _a = swap.matchedAmounts, totalIn = _a.in, totalOut = _a.out;
        if (!this.wallet.previousEon) {
            return { in: totalIn, out: totalOut };
        }
        var prevEonSwap = this.wallet.previousEon.transactions.find(function (t) { return t.txId === swap.txId; });
        if (!prevEonSwap) {
            return { in: totalIn, out: totalOut };
        }
        var _b = prevEonSwap.matchedAmounts, prevIn = _b.in, prevOut = _b.out;
        return { in: totalIn.minus(prevIn), out: totalOut.minus(prevOut) };
    };
    Eon.prototype.finalizeAndHarvestLocked = function () {
        var _this = this;
        return this.reactionLock.runExclusive(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2, this.finalizeAndHarvest.bind(this)()];
        }); }); });
    };
    Eon.prototype.finalizeAndHarvest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var txLength, swap, isIncoming, wallet, finalizationSignatures, swapFinalization, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 8, , 9]);
                        if (!this.isAvailableForSwaps) return [3, 7];
                        txLength = this.transactions.length;
                        if (!(txLength > 0 && this.transactions[txLength - 1].swap)) return [3, 7];
                        swap = this.transactions[txLength - 1];
                        isIncoming = this.wallet.token === swap.recipient.token;
                        if (!(isIncoming && swap.complete && !swap.recipientFinalizationActiveState)) return [3, 5];
                        console.log('Finalizing >>>>>>>', this.wallet.address, this.wallet.token);
                        return [4, nocust_1.nocust.getWallet(this.wallet.address, this.wallet.token)];
                    case 1:
                        wallet = _a.sent();
                        return [4, swaps_1.createFinalizationSignatures(wallet, swap)];
                    case 2:
                        finalizationSignatures = (_a.sent()).finalizationSignatures;
                        return [4, operator_1.operator.sendSwapFinalization(swap.id, finalizationSignatures)];
                    case 3:
                        swapFinalization = _a.sent();
                        return [4, syncWallet_1.syncWallet(wallet, syncWallet_1.SyncWalletEvent.SYNC_SWAP_FINALIZATION, swapFinalization)];
                    case 4:
                        _a.sent();
                        console.log('Successfully Finalized >>>>>>>', this.wallet.address, this.wallet.token);
                        _a.label = 5;
                    case 5:
                        if (!(this.balance.gt(0) &&
                            (swap.recipientFinalizationActiveState || swap.recipientCancellationActiveState))) return [3, 7];
                        console.log('Harvesting >>>>>>>', this.wallet.address, this.wallet.token);
                        return [4, nocust_1.nocust.transfer({
                                amount: this.balance,
                                from: this.wallet.address,
                                to: this.wallet.parentAddress,
                                token: this.wallet.token,
                            })];
                    case 6:
                        _a.sent();
                        console.log('Successfully Harvested >>>>>>>', this.wallet.address, this.wallet.token);
                        _a.label = 7;
                    case 7: return [3, 9];
                    case 8:
                        e_1 = _a.sent();
                        console.log("Error occurred while trying to finalize/harvest " + this.wallet.token + "/" + this.wallet.address, e_1);
                        return [3, 9];
                    case 9: return [2];
                }
            });
        });
    };
    Eon.prototype.clone = function () {
        var eon = new Eon(this.wallet, this.eon);
        eon.accountProof = __assign({}, this.accountProof);
        eon.membershipProofPath = this.membershipProofPath;
        eon.deposits = __spread(this.deposits);
        eon.transactions = __spread(this.transactions);
        return eon;
    };
    Eon.prototype.toJSON = function () {
        return {
            eon: this.eon,
            membershipProofPath: this.membershipProofPath,
            accountProof: this.accountProof,
            deposits: this.deposits,
            transactions: this.transactions,
            withdrawalRequest: this.withdrawalRequest,
            withdrawal: this.withdrawal,
        };
    };
    Object.defineProperty(Eon.prototype, "proofOfExclusiveBalanceAllotment", {
        get: function () {
            return {
                token: this.wallet.token,
                activeStateHash: activeState_1.hashActiveState(this.activeState, true),
                accountProof: this.accountProof,
                membershipProofPath: this.membershipProofPath,
                passiveAggregate: this.passiveAggregate,
            };
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        mobx_1.observable
    ], Eon.prototype, "deposits", void 0);
    __decorate([
        mobx_1.observable
    ], Eon.prototype, "transactions", void 0);
    __decorate([
        mobx_1.observable
    ], Eon.prototype, "withdrawalRequest", void 0);
    __decorate([
        mobx_1.observable
    ], Eon.prototype, "withdrawal", void 0);
    __decorate([
        mobx_1.computed
    ], Eon.prototype, "activeTransactions", null);
    __decorate([
        mobx_1.computed
    ], Eon.prototype, "lastTransaction", null);
    __decorate([
        mobx_1.computed
    ], Eon.prototype, "outgoingTransactions", null);
    __decorate([
        mobx_1.computed
    ], Eon.prototype, "incomingTransactions", null);
    __decorate([
        mobx_1.computed
    ], Eon.prototype, "passiveAmountReceived", null);
    __decorate([
        mobx_1.computed
    ], Eon.prototype, "spentAndGained", null);
    __decorate([
        mobx_1.computed
    ], Eon.prototype, "deposited", null);
    __decorate([
        mobx_1.computed
    ], Eon.prototype, "initialBalanceAllotment", null);
    __decorate([
        mobx_1.computed
    ], Eon.prototype, "balance", null);
    __decorate([
        mobx_1.computed
    ], Eon.prototype, "activeTree", null);
    __decorate([
        mobx_1.computed
    ], Eon.prototype, "passiveTree", null);
    __decorate([
        mobx_1.computed
    ], Eon.prototype, "activeState", null);
    __decorate([
        mobx_1.computed
    ], Eon.prototype, "passiveAggregate", null);
    __decorate([
        mobx_1.computed
    ], Eon.prototype, "isAvailableForSwaps", null);
    __decorate([
        mobx_1.computed
    ], Eon.prototype, "proofOfExclusiveBalanceAllotment", null);
    return Eon;
}());
exports.Eon = Eon;
//# sourceMappingURL=eon.js.map