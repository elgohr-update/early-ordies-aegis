"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var activeState_1 = require("./activeState");
var blockchain_1 = require("../services/blockchain");
var operator_1 = require("../services/operator");
var transformers_1 = require("../services/operator/transformers");
var eon_1 = require("./eon");
var nocust_1 = require("../nocust");
var _1 = require(".");
var constants_1 = require("../constants");
var SyncWalletEvent;
(function (SyncWalletEvent) {
    SyncWalletEvent["RECONSTRUCT"] = "RECONSTRUCT";
    SyncWalletEvent["FULL_SYNC"] = "FULL_SYNC";
    SyncWalletEvent["INCREMENT_EON"] = "INCREMENT_EON";
    SyncWalletEvent["SYNC_DEPOSITS"] = "SYNC_DEPOSITS";
    SyncWalletEvent["SYNC_TRANSACTIONS"] = "SYNC_TRANSACTIONS";
    SyncWalletEvent["SYNC_SWAP_CANCELLATION"] = "SYNC_SWAP_CANCELLATION";
    SyncWalletEvent["SYNC_SWAP_FINALIZATION"] = "SYNC_SWAP_FINALIZATION";
    SyncWalletEvent["SYNC_SWAP_FREEZE"] = "SYNC_SWAP_FREEZE";
})(SyncWalletEvent = exports.SyncWalletEvent || (exports.SyncWalletEvent = {}));
function syncWallet(wallet, event, data) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, e_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 12, , 13]);
                    if (!blockchain_1.blockchain.isPrivateKeyAdded(wallet.address)) {
                        return [2];
                    }
                    _a = event;
                    switch (_a) {
                        case SyncWalletEvent.RECONSTRUCT: return [3, 1];
                        case SyncWalletEvent.FULL_SYNC: return [3, 3];
                        case SyncWalletEvent.INCREMENT_EON: return [3, 5];
                        case SyncWalletEvent.SYNC_DEPOSITS: return [3, 6];
                        case SyncWalletEvent.SYNC_TRANSACTIONS: return [3, 7];
                        case SyncWalletEvent.SYNC_SWAP_CANCELLATION: return [3, 8];
                        case SyncWalletEvent.SYNC_SWAP_FINALIZATION: return [3, 9];
                        case SyncWalletEvent.SYNC_SWAP_FREEZE: return [3, 10];
                    }
                    return [3, 11];
                case 1: return [4, reconstruct(wallet)];
                case 2:
                    _b.sent();
                    return [3, 11];
                case 3: return [4, syncFull(wallet)];
                case 4:
                    _b.sent();
                    return [3, 11];
                case 5:
                    incrementEon(wallet, data);
                    return [3, 11];
                case 6:
                    syncDeposits(wallet, data);
                    return [3, 11];
                case 7:
                    syncTransactions(wallet, data);
                    return [3, 11];
                case 8:
                    syncSwapCancellation(wallet, data);
                    return [3, 11];
                case 9:
                    syncSwapFinalization(wallet, data);
                    return [3, 11];
                case 10:
                    syncSwapFreeze(wallet, data);
                    return [3, 11];
                case 11:
                    _1.updateWallet(wallet);
                    return [3, 13];
                case 12:
                    e_1 = _b.sent();
                    return [2, Promise.reject(e_1)];
                case 13: return [2];
            }
        });
    });
}
exports.syncWallet = syncWallet;
function reconstruct(wallet) {
    return __awaiter(this, void 0, void 0, function () {
        var address, token, eon, walletState, e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 4, , 5]);
                    address = wallet.address, token = wallet.token;
                    return [4, nocust_1.nocust.getEon()];
                case 1:
                    eon = _a.sent();
                    return [4, operator_1.operator.fetchWalletState({ address: address, token: token, eon: eon })];
                case 2:
                    walletState = _a.sent();
                    syncRegistration(wallet, walletState.registration);
                    return [4, syncFull(wallet, walletState)];
                case 3:
                    _a.sent();
                    return [3, 5];
                case 4:
                    e_2 = _a.sent();
                    console.log(e_2);
                    return [2, Promise.reject(e_2)];
                case 5: return [2];
            }
        });
    });
}
function syncFull(wallet, walletState) {
    return __awaiter(this, void 0, void 0, function () {
        var address, token, currentEon, currentEonNumber;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    address = wallet.address, token = wallet.token, currentEon = wallet.currentEon;
                    return [4, nocust_1.nocust.getEon()];
                case 1:
                    currentEonNumber = _a.sent();
                    if (!!walletState) return [3, 3];
                    return [4, operator_1.operator.fetchWalletState({ address: address, token: token, eon: currentEonNumber })];
                case 2:
                    walletState = _a.sent();
                    _a.label = 3;
                case 3:
                    if (!(currentEonNumber === wallet.registrationEon)) return [3, 4];
                    return [3, 7];
                case 4:
                    if (!(currentEonNumber - currentEon.eon > 1)) return [3, 6];
                    console.log('[WARNING] You missed eon synchronization, fetching wallet from operator without integrity check');
                    return [4, setNewEons(wallet, walletState, currentEonNumber)];
                case 5:
                    _a.sent();
                    return [3, 7];
                case 6:
                    if (currentEonNumber === currentEon.eon) {
                    }
                    else {
                        incrementEon(wallet, walletState);
                    }
                    _a.label = 7;
                case 7:
                    syncDeposits(wallet, walletState.deposits);
                    syncTransactions(wallet, { payloads: walletState.transactions });
                    return [2];
            }
        });
    });
}
function returnEon(wallet, walletState) {
    if (!walletState.merkleProof) {
        console.log('No data to increment eon');
        return;
    }
    var operatorEonData = walletState.merkleProof;
    var newEon = new eon_1.Eon(wallet, operatorEonData.eon);
    newEon.membershipProofPath = operatorEonData.membershipChain;
    newEon.accountProof.left = new bignumber_js_1.default(operatorEonData.left);
    newEon.accountProof.right = new bignumber_js_1.default(operatorEonData.right);
    newEon.accountProof.path = operatorEonData.allotmentChain;
    newEon.accountProof.pathValues = operatorEonData.values.map(function (v) { return new bignumber_js_1.default(v); });
    return newEon;
}
function setNewEons(wallet, walletState, currentEonNumber) {
    return __awaiter(this, void 0, void 0, function () {
        var address, token, previousWalletState, e_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    address = wallet.address, token = wallet.token;
                    return [4, operator_1.operator.fetchWalletState({
                            address: address,
                            token: token,
                            eon: currentEonNumber - 1,
                        })];
                case 1:
                    previousWalletState = _a.sent();
                    wallet.previousEon = returnEon(wallet, previousWalletState);
                    syncTransactions(wallet, { payloads: previousWalletState.transactions }, false);
                    wallet.currentEon = returnEon(wallet, walletState);
                    return [3, 3];
                case 2:
                    e_3 = _a.sent();
                    console.log(e_3);
                    return [2, Promise.reject(e_3)];
                case 3: return [2];
            }
        });
    });
}
function incrementEon(wallet, walletState) {
    if (!walletState.merkleProof) {
        console.log('No data to increment eon');
        return;
    }
    var operatorEonData = walletState.merkleProof;
    if (wallet.currentEon.eon !== wallet.registrationEon &&
        wallet.currentEon.eon >= operatorEonData.eon) {
        console.log('[ERROR] Local data has already been updated for new eon');
        return;
    }
    var newEon = returnEon(wallet, walletState);
    wallet.previousEon = wallet.currentEon;
    wallet.currentEon = newEon;
    syncDeposits(wallet, walletState.deposits);
    syncTransactions(wallet, { payloads: walletState.transactions });
}
function syncDeposits(wallet, deposits) {
    var currentEon = wallet.currentEon;
    deposits.forEach(function (deposit) {
        var existingDeposit = currentEon.deposits.find(function (d) { return d.txId === deposit.txId; });
        if (!existingDeposit && deposit.eon === currentEon.eon) {
            currentEon.deposits.push(transformers_1.transformDepositFromServer(deposit));
        }
    });
}
function syncTransactions(wallet, data, isCurrentEon) {
    if (isCurrentEon === void 0) { isCurrentEon = true; }
    var walletPayload = isCurrentEon ? wallet.currentEon : wallet.previousEon;
    data.payloads.forEach(function (transactionPayload) {
        if (transactionPayload.eon === walletPayload.eon) {
            var txIndex = walletPayload.transactions.findIndex(function (t) { return t.id === transactionPayload.id; });
            if (txIndex === -1) {
                walletPayload.transactions.push(transformers_1.transformTransactionFromServer(transactionPayload));
            }
            else {
                var transaction = walletPayload.transactions[txIndex];
                walletPayload.transactions[txIndex] = __assign(__assign({}, transaction), transformers_1.transformTransactionFromServer(transactionPayload));
            }
        }
    });
}
function syncRegistration(wallet, registration) {
    var address = wallet.address, token = wallet.token;
    var hash = activeState_1.hashActiveState({
        token: token,
        address: address,
        eon: registration.eon,
        trailIdentifier: 0,
        transactionSetHash: constants_1.EMPTY_HASH,
        spent: new bignumber_js_1.default(0),
        gained: new bignumber_js_1.default(0),
    });
    var isRegistrationValid = blockchain_1.blockchain.validateSignature(hash, registration.walletSignature, address);
    if (isRegistrationValid) {
        _1.fillWalletRegistration(wallet, __assign(__assign({}, registration), { hash: hash }));
    }
    else {
        throw new Error('[INTERNAL] Registration signature from operator does not match');
    }
}
function syncSwapCancellation(wallet, swapCancellation) {
    var swapIndex = wallet.currentEon.transactions.findIndex(function (transaction) { return transaction.id === swapCancellation.id; });
    if (swapIndex !== -1) {
        var walletId = {
            address: wallet.address,
            token: wallet.token,
            trailIdentifier: wallet.trailIdentifier,
        };
        var senderCancellationActiveState = swapCancellation.senderCancellationActiveState, recipientCancellationActiveState = swapCancellation.recipientCancellationActiveState;
        wallet.currentEon.transactions[swapIndex] = __assign(__assign({}, wallet.currentEon.transactions[swapIndex]), { senderCancellationActiveState: transformers_1.transformActiveStateFromServer(walletId, wallet.currentEon.eon, senderCancellationActiveState), recipientCancellationActiveState: wallet.currentEon.transactions[swapIndex].recipientCancellationActiveState = transformers_1.transformActiveStateFromServer(walletId, wallet.currentEon.eon, recipientCancellationActiveState), cancelled: true });
    }
}
function syncSwapFinalization(wallet, swapFinalization) {
    var swapIndex = wallet.currentEon.transactions.findIndex(function (transaction) { return transaction.id === swapFinalization.id; });
    if (swapIndex !== -1) {
        var walletId = {
            address: wallet.address,
            token: wallet.token,
            trailIdentifier: wallet.trailIdentifier,
        };
        var recipientFinalizationActiveState = swapFinalization.recipientFinalizationActiveState;
        wallet.currentEon.transactions[swapIndex] = __assign(__assign({}, wallet.currentEon.transactions[swapIndex]), { recipientFinalizationActiveState: transformers_1.transformActiveStateFromServer(walletId, wallet.currentEon.eon, recipientFinalizationActiveState) });
    }
}
function syncSwapFreeze(wallet, swapFreeze) {
    var swapIndex = wallet.currentEon.transactions.findIndex(function (transaction) { return transaction.id === swapFreeze.id; });
    if (swapIndex !== -1) {
        var matchedAmounts = swapFreeze.matchedAmounts;
        wallet.currentEon.transactions[swapIndex] = __assign(__assign({}, wallet.currentEon.transactions[swapIndex]), { matchedAmounts: {
                in: new bignumber_js_1.default(matchedAmounts.matchedIn),
                out: new bignumber_js_1.default(matchedAmounts.matchedOut),
            }, cancelled: true });
    }
}
//# sourceMappingURL=syncWallet.js.map